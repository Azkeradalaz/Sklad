//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class MatsAndGoodsListDetail
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private MatsAndGoodsListDetail() : base("LightSwitchApplication.Sklad.DesktopClient:MatsAndGoodsListDetail")
        {
            global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static MatsAndGoodsListDetail CreateInstance()
        {
            return new global::LightSwitchApplication.MatsAndGoodsListDetail(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsListDetail_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void Recipes_SelectionChanged();

        partial void Recipes_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Loaded(bool succeeded);

        partial void RecipesComponents_SelectionChanged();

        partial void RecipesComponents_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Loaded(bool succeeded);

        partial void Category_Changed();

        partial void Name_Changed();

        partial void RecipesComponents1_SelectionChanged();

        partial void RecipesComponents1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents1_Loaded(bool succeeded);

        partial void CraftAction_SelectionChanged();

        partial void CraftAction_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Loaded(bool succeeded);

        partial void Craft_SelectionChanged();

        partial void Craft_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Loaded(bool succeeded);

        partial void CraftFiller_SelectionChanged();

        partial void CraftFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Loaded(bool succeeded);

        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void ActionsFiller1_SelectionChanged();

        partial void ActionsFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Loaded(bool succeeded);

        partial void CraftFiller1_SelectionChanged();

        partial void CraftFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller1_Loaded(bool succeeded);

        partial void ID_Changed();

        partial void ID1_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Recipes. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesItem> Recipes
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Recipes);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.RecipesComponents);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Category
        {
            get 
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Category);
            }
            set
            {
                global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Category, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Category_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents1
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.RecipesComponents1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftAction. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftActionItem> CraftAction
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftAction);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Craft. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftItem> Craft
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Craft);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftFillerItem> CraftFiller
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ActionsFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftFillerItem> CraftFiller1
        {
            get
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> ID
        {
            get 
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID);
            }
            set
            {
                global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> ID1
        {
            get 
            {
                return global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.GetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID1);
            }
            set
            {
                global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.SetValue(this, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID1, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySet, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.CommandSet, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.MatsAndGoods;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>.Entry
                __MatsAndGoodsListDetailEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>.Entry(
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeSavingEvent,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeSavedEvent,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeClosingEvent,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeCreated,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeActivated,
                    global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.__MatsAndGoodsListDetail_InvokeSaveErrorEvent);
            private static void __MatsAndGoodsListDetail_InvokeInitializeDataWorkspace(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.MatsAndGoodsListDetail_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __MatsAndGoodsListDetail_InvokeSavingEvent(global::LightSwitchApplication.MatsAndGoodsListDetail s)
            {
                bool handled = false;
                s.MatsAndGoodsListDetail_Saving(ref handled);
                return handled;
            }
            private static void __MatsAndGoodsListDetail_InvokeSavedEvent(global::LightSwitchApplication.MatsAndGoodsListDetail s)
            {
                s.MatsAndGoodsListDetail_Saved();
            }
            private static bool __MatsAndGoodsListDetail_InvokeClosingEvent(global::LightSwitchApplication.MatsAndGoodsListDetail s)
            {
                bool cancel = false;
                s.MatsAndGoodsListDetail_Closing(ref cancel);
                return cancel;
            }
            private static void __MatsAndGoodsListDetail_InvokeCreated(global::LightSwitchApplication.MatsAndGoodsListDetail s)
            {
                s.MatsAndGoodsListDetail_Created();
            }
            private static void __MatsAndGoodsListDetail_InvokeActivated(global::LightSwitchApplication.MatsAndGoodsListDetail s)
            {
                s.MatsAndGoodsListDetail_Activated();
            }
            private static bool __MatsAndGoodsListDetail_InvokeSaveErrorEvent(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Exception ex)
            {
                bool handled = false;
                s.MatsAndGoodsListDetail_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery(string Category, string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.MatsAndGoods,
                    (m) => (((Category == null) || m.Category.Contains(Category)) && ((Name == null) || m.Name.Contains(Name))));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesQuery()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.Recipes).Loader;
                if (loader == null)
                {
                    return null;
                }

                return loader;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponentsQuery()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.RecipesComponents).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "RecipesItem"),
                    "RecipesItem.MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponents1Query()
            {
                if (this.Screen.Recipes.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Recipes.SelectedItem.Details.Properties.RecipesComponents).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "MatsAndGoodsItem"),
                    "RecipesItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftActionQuery(global::System.Nullable<decimal> ID)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.CraftAction,
                            (c) => ((ID.HasValue == false) || (ID.HasValue && (c.ID == ID)))),
                        "SkladiItem"),
                    "ResponsibleItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.Craft).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "RecipesItem"),
                    "RecipesItem.MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftFillerQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.CraftFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery(global::System.Nullable<decimal> ID1)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                            global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                                this.Screen.DataWorkspace.skladData.Actions,
                                (a) => ((ID1.HasValue == false) || (ID1.HasValue && (a.ID == ID1)))),
                            "SkladiItem"),
                        "SkladiItem1"),
                    "SuppliersItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFiller1Query()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                            global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                                global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                                    loader,
                                    "ActionsItem"),
                                "ActionsItem.SkladiItem"),
                            "ActionsItem.SkladiItem1"),
                        "ActionsItem.SuppliersItem"),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftFiller1Query()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.CraftFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                            global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                                loader,
                                "MatsAndGoodsItem"),
                            "CraftActionItem"),
                        "CraftActionItem.SkladiItem"),
                    "CraftActionItem.ResponsibleItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data _Recipes;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Data _Category;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data _CraftAction;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem>.Data _Craft;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data _CraftFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data _CraftFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Data _ID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Data _ID1;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem> Recipes
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Recipes);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.RecipesComponents);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string> Category
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Category);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Name);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.RecipesComponents1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem> CraftAction
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftAction);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem> Craft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Craft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem> CraftFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ActionsFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem> CraftFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.CraftFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>> ID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>> ID1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties.ID1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery((string)args[0], (string)args[1]);
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery();
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry
                    Recipes = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry(
                        "Recipes",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Recipes_OnLoaded);
                private static void _Recipes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Recipes, sf);
                }
                private static void _Recipes_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Recipes_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Recipes_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.RecipesQuery();
                }
                private static void _Recipes_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.Recipes_SelectionChanged();
                }
                private static void _Recipes_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Recipes_Changed(e);
                }
                private static void _Recipes_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.Recipes_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents_OnLoaded);
                private static void _RecipesComponents_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents, sf);
                }
                private static void _RecipesComponents_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.RecipesComponentsQuery();
                }
                private static void _RecipesComponents_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.RecipesComponents_SelectionChanged();
                }
                private static void _RecipesComponents_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents_Changed(e);
                }
                private static void _RecipesComponents_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.RecipesComponents_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Entry
                    Category = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Entry(
                        "Category",
                        false,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Category_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Category_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Category_OnValueChanged);
                private static void _Category_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Category, sf);
                }
                private static void _Category_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Category_Validate(r);
                }
                private static void _Category_OnValueChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.Category_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, string>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.Name_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents1",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._RecipesComponents1_OnLoaded);
                private static void _RecipesComponents1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents1, sf);
                }
                private static void _RecipesComponents1_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents1_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.RecipesComponents1Query();
                }
                private static void _RecipesComponents1_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.RecipesComponents1_SelectionChanged();
                }
                private static void _RecipesComponents1_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents1_Changed(e);
                }
                private static void _RecipesComponents1_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.RecipesComponents1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry
                    CraftAction = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry(
                        "CraftAction",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftAction_OnLoaded);
                private static void _CraftAction_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftAction, sf);
                }
                private static void _CraftAction_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftAction_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftAction_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.CraftActionQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _CraftAction_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.CraftAction_SelectionChanged();
                }
                private static void _CraftAction_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftAction_Changed(e);
                }
                private static void _CraftAction_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.CraftAction_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry
                    Craft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry(
                        "Craft",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Craft_OnLoaded);
                private static void _Craft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Craft, sf);
                }
                private static void _Craft_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Craft_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Craft_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.CraftQuery();
                }
                private static void _Craft_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.Craft_SelectionChanged();
                }
                private static void _Craft_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Craft_Changed(e);
                }
                private static void _Craft_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.Craft_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry
                    CraftFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry(
                        "CraftFiller",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller_OnLoaded);
                private static void _CraftFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftFiller, sf);
                }
                private static void _CraftFiller_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftFiller_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.CraftFillerQuery();
                }
                private static void _CraftFiller_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.CraftFiller_SelectionChanged();
                }
                private static void _CraftFiller_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftFiller_Changed(e);
                }
                private static void _CraftFiller_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.CraftFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller1",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ActionsFiller1_OnLoaded);
                private static void _ActionsFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller1, sf);
                }
                private static void _ActionsFiller1_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller1_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.ActionsFiller1Query();
                }
                private static void _ActionsFiller1_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.ActionsFiller1_SelectionChanged();
                }
                private static void _ActionsFiller1_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller1_Changed(e);
                }
                private static void _ActionsFiller1_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.ActionsFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry
                    CraftFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry(
                        "CraftFiller1",
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_CreateQuery,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_SelectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._CraftFiller1_OnLoaded);
                private static void _CraftFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftFiller1, sf);
                }
                private static void _CraftFiller1_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftFiller1_CreateQuery(global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object[] args)
                {
                    return d.CraftFiller1Query();
                }
                private static void _CraftFiller1_SelectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.CraftFiller1_SelectionChanged();
                }
                private static void _CraftFiller1_OnCollectionChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftFiller1_Changed(e);
                }
                private static void _CraftFiller1_OnLoaded(global::LightSwitchApplication.MatsAndGoodsListDetail s, bool succeeded)
                {
                    s.CraftFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Entry
                    ID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "ID",
                        false,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID_OnValueChanged);
                private static void _ID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._ID, sf);
                }
                private static void _ID_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ID_Validate(r);
                }
                private static void _ID_OnValueChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.ID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Entry
                    ID1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "ID1",
                        false,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID1_Stub,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID1_Validate,
                        global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass.PropertySetProperties._ID1_OnValueChanged);
                private static void _ID1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.MatsAndGoodsListDetail, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.MatsAndGoodsListDetail.DetailsClass d, object sf)
                {
                    c(d, ref d._ID1, sf);
                }
                private static void _ID1_Validate(global::LightSwitchApplication.MatsAndGoodsListDetail s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ID1_Validate(r);
                }
                private static void _ID1_OnValueChanged(global::LightSwitchApplication.MatsAndGoodsListDetail s)
                {
                    s.ID1_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Блоки
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Блоки() : base("LightSwitchApplication.Sklad.DesktopClient:Блоки")
        {
            global::LightSwitchApplication.Блоки.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Блоки CreateInstance()
        {
            return new global::LightSwitchApplication.Блоки(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Блоки_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void MatsAndGoods1_SelectionChanged();

        partial void MatsAndGoods1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities1_SelectionChanged();

        partial void MatsAndGoodsQuantities1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Loaded(bool succeeded);

        partial void Name_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.Блоки.DetailsClass.GetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.Блоки.DetailsClass.GetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
        {
            get
            {
                return global::LightSwitchApplication.Блоки.DetailsClass.GetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoods1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
        {
            get
            {
                return global::LightSwitchApplication.Блоки.DetailsClass.GetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Блоки.DetailsClass.GetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Блоки.DetailsClass.SetValue(this, global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана OkNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkNewMAG()
        {
            this.Details.Methods.OkNewMAG.CreateInvocation().Execute();
        }
        partial void OkNewMAG_CanExecute(ref bool result);
        partial void OkNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelNewMAG()
        {
            this.Details.Methods.CancelNewMAG.CreateInvocation().Execute();
        }
        partial void CancelNewMAG_CanExecute(ref bool result);
        partial void CancelNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана OkEdit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkEdit()
        {
            this.Details.Methods.OkEdit.CreateInvocation().Execute();
        }
        partial void OkEdit_CanExecute(ref bool result);
        partial void OkEdit_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelEditMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelEditMAG()
        {
            this.Details.Methods.CancelEditMAG.CreateInvocation().Execute();
        }
        partial void CancelEditMAG_CanExecute(ref bool result);
        partial void CancelEditMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана gridAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridAddAndEditNew()
        {
            this.Details.Methods.gridAddAndEditNew.CreateInvocation().Execute();
        }
        partial void gridAddAndEditNew_CanExecute(ref bool result);
        partial void gridAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана gridEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridEditSelected()
        {
            this.Details.Methods.gridEditSelected.CreateInvocation().Execute();
        }
        partial void gridEditSelected_CanExecute(ref bool result);
        partial void gridEditSelected_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.Блоки.DetailsClass.PropertySet, global::LightSwitchApplication.Блоки.DetailsClass.CommandSet, global::LightSwitchApplication.Блоки.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoods;
                var initializeCommandEntry = global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.OkNewMAG;
                var initializeMethodEntry = global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.OkNewMAG;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                __БлокиEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeSavingEvent,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeSavedEvent,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeClosingEvent,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeCreated,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeActivated,
                    global::LightSwitchApplication.Блоки.DetailsClass.__Блоки_InvokeSaveErrorEvent);
            private static void __Блоки_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Блоки s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Блоки_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Блоки_InvokeSavingEvent(global::LightSwitchApplication.Блоки s)
            {
                bool handled = false;
                s.Блоки_Saving(ref handled);
                return handled;
            }
            private static void __Блоки_InvokeSavedEvent(global::LightSwitchApplication.Блоки s)
            {
                s.Блоки_Saved();
            }
            private static bool __Блоки_InvokeClosingEvent(global::LightSwitchApplication.Блоки s)
            {
                bool cancel = false;
                s.Блоки_Closing(ref cancel);
                return cancel;
            }
            private static void __Блоки_InvokeCreated(global::LightSwitchApplication.Блоки s)
            {
                s.Блоки_Created();
            }
            private static void __Блоки_InvokeActivated(global::LightSwitchApplication.Блоки s)
            {
                s.Блоки_Activated();
            }
            private static bool __Блоки_InvokeSaveErrorEvent(global::LightSwitchApplication.Блоки s, global::System.Exception ex)
            {
                bool handled = false;
                s.Блоки_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Блоки.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Блоки.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Блоки.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.MatsAndGoods,
                        (m) => ((m.Category.CompareTo("Блок") == 0) && ((Name == null) || m.Name.Contains(Name)))),
                    (m) => m.Name);
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            loader,
                            (m) => (m.SkladiItem.Status.CompareTo("Функционирует") == 0)),
                        (m) => m.MatsAndGoodsItem.Name),
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoods1Query()
            {
                return this.Screen.DataWorkspace.skladData.MatsAndGoods;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantities1Query()
            {
                if (this.Screen.MatsAndGoods1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods1.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    loader,
                    (m) => (m.SkladiItem.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _OkNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _CancelNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _OkEditCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _CancelEditMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _gridAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _gridEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _OkNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _CancelNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _OkEditMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _CancelEditMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _gridAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data _gridEditSelectedMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoods1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties.Name);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> OkEdit
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.OkEdit);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> OkEdit
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.OkEdit);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>)base.GetItem(global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.Блоки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.Блоки.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery((string)args[0]);
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.Блоки s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.Блоки s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.Блоки s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.Блоки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.Блоки.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery();
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.Блоки s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.Блоки s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.Блоки s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods1",
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_Validate,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_CreateQuery,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_SelectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_OnCollectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoods1_OnLoaded);
                private static void _MatsAndGoods1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods1, sf);
                }
                private static void _MatsAndGoods1_Validate(global::LightSwitchApplication.Блоки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods1_CreateQuery(global::LightSwitchApplication.Блоки.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoods1Query();
                }
                private static void _MatsAndGoods1_SelectionChanged(global::LightSwitchApplication.Блоки s)
                {
                    s.MatsAndGoods1_SelectionChanged();
                }
                private static void _MatsAndGoods1_OnCollectionChanged(global::LightSwitchApplication.Блоки s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods1_Changed(e);
                }
                private static void _MatsAndGoods1_OnLoaded(global::LightSwitchApplication.Блоки s, bool succeeded)
                {
                    s.MatsAndGoods1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities1",
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Validate,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_CreateQuery,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_SelectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnCollectionChanged,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnLoaded);
                private static void _MatsAndGoodsQuantities1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities1, sf);
                }
                private static void _MatsAndGoodsQuantities1_Validate(global::LightSwitchApplication.Блоки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities1_CreateQuery(global::LightSwitchApplication.Блоки.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantities1Query();
                }
                private static void _MatsAndGoodsQuantities1_SelectionChanged(global::LightSwitchApplication.Блоки s)
                {
                    s.MatsAndGoodsQuantities1_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities1_OnCollectionChanged(global::LightSwitchApplication.Блоки s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities1_Changed(e);
                }
                private static void _MatsAndGoodsQuantities1_OnLoaded(global::LightSwitchApplication.Блоки s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Блоки.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass, string>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Блоки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Блоки s)
                {
                    s.Name_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._OkNewMAG_CreateExecutableObject);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkNewMAG_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.OkNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._CancelNewMAG_CreateExecutableObject);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelNewMAG_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.CancelNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    OkEdit = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "OkEdit",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._OkEdit_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._OkEdit_CreateExecutableObject);
                private static void _OkEdit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._OkEditCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkEdit_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.OkEdit.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._CancelEditMAG_CreateExecutableObject);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelEditMAG_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.CancelEditMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._gridAddAndEditNew_CreateExecutableObject);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.gridAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.CommandSetProperties._gridEditSelected_CreateExecutableObject);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridEditSelected_CreateExecutableObject(global::LightSwitchApplication.Блоки.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Блоки.DetailsClass)d).Methods.gridEditSelected.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkNewMAG_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkNewMAG_InvokeMethod);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGMethod, sf);
                }
                private static global::System.Exception _OkNewMAG_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkNewMAG_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelNewMAG_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelNewMAG_InvokeMethod);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGMethod, sf);
                }
                private static global::System.Exception _CancelNewMAG_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelNewMAG_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    OkEdit = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "OkEdit",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkEdit_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkEdit_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._OkEdit_InvokeMethod);
                private static void _OkEdit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._OkEditMethod, sf);
                }
                private static global::System.Exception _OkEdit_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkEdit_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkEdit_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkEdit_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelEditMAG_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._CancelEditMAG_InvokeMethod);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGMethod, sf);
                }
                private static global::System.Exception _CancelEditMAG_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelEditMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelEditMAG_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelEditMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridAddAndEditNew_InvokeMethod);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _gridAddAndEditNew_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridEditSelected_CanInvoke,
                        global::LightSwitchApplication.Блоки.DetailsClass.MethodSetProperties._gridEditSelected_InvokeMethod);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Блоки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Блоки, global::LightSwitchApplication.Блоки.DetailsClass>.Data> c, global::LightSwitchApplication.Блоки.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedMethod, sf);
                }
                private static global::System.Exception _gridEditSelected_CanInvoke(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridEditSelected_InvokeMethod(global::LightSwitchApplication.Блоки.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridEditSelected_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ГотовыеИзделия
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ГотовыеИзделия() : base("LightSwitchApplication.Sklad.DesktopClient:ГотовыеИзделия")
        {
            global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ГотовыеИзделия CreateInstance()
        {
            return new global::LightSwitchApplication.ГотовыеИзделия(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ГотовыеИзделия_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void MatsAndGoods1_SelectionChanged();

        partial void MatsAndGoods1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities1_SelectionChanged();

        partial void MatsAndGoodsQuantities1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Loaded(bool succeeded);

        partial void Name_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.GetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.GetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
        {
            get
            {
                return global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.GetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoods1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
        {
            get
            {
                return global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.GetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.GetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.SetValue(this, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана OkNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkNewMAG()
        {
            this.Details.Methods.OkNewMAG.CreateInvocation().Execute();
        }
        partial void OkNewMAG_CanExecute(ref bool result);
        partial void OkNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelNewMAG()
        {
            this.Details.Methods.CancelNewMAG.CreateInvocation().Execute();
        }
        partial void CancelNewMAG_CanExecute(ref bool result);
        partial void CancelNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана OkEdit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkEdit()
        {
            this.Details.Methods.OkEdit.CreateInvocation().Execute();
        }
        partial void OkEdit_CanExecute(ref bool result);
        partial void OkEdit_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelEditMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelEditMAG()
        {
            this.Details.Methods.CancelEditMAG.CreateInvocation().Execute();
        }
        partial void CancelEditMAG_CanExecute(ref bool result);
        partial void CancelEditMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана gridAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridAddAndEditNew()
        {
            this.Details.Methods.gridAddAndEditNew.CreateInvocation().Execute();
        }
        partial void gridAddAndEditNew_CanExecute(ref bool result);
        partial void gridAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана gridEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridEditSelected()
        {
            this.Details.Methods.gridEditSelected.CreateInvocation().Execute();
        }
        partial void gridEditSelected_CanExecute(ref bool result);
        partial void gridEditSelected_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySet, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSet, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoods;
                var initializeCommandEntry = global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.OkNewMAG;
                var initializeMethodEntry = global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.OkNewMAG;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                __ГотовыеИзделияEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeSavingEvent,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeSavedEvent,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeClosingEvent,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeCreated,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeActivated,
                    global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.__ГотовыеИзделия_InvokeSaveErrorEvent);
            private static void __ГотовыеИзделия_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ГотовыеИзделия_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ГотовыеИзделия_InvokeSavingEvent(global::LightSwitchApplication.ГотовыеИзделия s)
            {
                bool handled = false;
                s.ГотовыеИзделия_Saving(ref handled);
                return handled;
            }
            private static void __ГотовыеИзделия_InvokeSavedEvent(global::LightSwitchApplication.ГотовыеИзделия s)
            {
                s.ГотовыеИзделия_Saved();
            }
            private static bool __ГотовыеИзделия_InvokeClosingEvent(global::LightSwitchApplication.ГотовыеИзделия s)
            {
                bool cancel = false;
                s.ГотовыеИзделия_Closing(ref cancel);
                return cancel;
            }
            private static void __ГотовыеИзделия_InvokeCreated(global::LightSwitchApplication.ГотовыеИзделия s)
            {
                s.ГотовыеИзделия_Created();
            }
            private static void __ГотовыеИзделия_InvokeActivated(global::LightSwitchApplication.ГотовыеИзделия s)
            {
                s.ГотовыеИзделия_Activated();
            }
            private static bool __ГотовыеИзделия_InvokeSaveErrorEvent(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Exception ex)
            {
                bool handled = false;
                s.ГотовыеИзделия_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.MatsAndGoods,
                        (m) => ((m.Category.CompareTo("Готовое изделие") == 0) && ((Name == null) || m.Name.Contains(Name)))),
                    (m) => m.Name);
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery()
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            loader,
                            (m) => (m.SkladiItem.Status.CompareTo("Функционирует") == 0)),
                        (m) => m.MatsAndGoodsItem.Name),
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoods1Query()
            {
                return this.Screen.DataWorkspace.skladData.MatsAndGoods;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantities1Query()
            {
                if (this.Screen.MatsAndGoods1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods1.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    loader,
                    (m) => (m.SkladiItem.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _OkNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _CancelNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _OkEditCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _CancelEditMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _gridAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _gridEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _OkNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _CancelNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _OkEditMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _CancelEditMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _gridAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data _gridEditSelectedMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoods1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties.Name);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> OkEdit
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.OkEdit);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> OkEdit
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.OkEdit);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>)base.GetItem(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.ГотовыеИзделия s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery((string)args[0]);
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.ГотовыеИзделия s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.ГотовыеИзделия s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.ГотовыеИзделия s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery();
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.ГотовыеИзделия s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.ГотовыеИзделия s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods1",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_Validate,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_CreateQuery,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_SelectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_OnCollectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoods1_OnLoaded);
                private static void _MatsAndGoods1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods1, sf);
                }
                private static void _MatsAndGoods1_Validate(global::LightSwitchApplication.ГотовыеИзделия s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods1_CreateQuery(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoods1Query();
                }
                private static void _MatsAndGoods1_SelectionChanged(global::LightSwitchApplication.ГотовыеИзделия s)
                {
                    s.MatsAndGoods1_SelectionChanged();
                }
                private static void _MatsAndGoods1_OnCollectionChanged(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods1_Changed(e);
                }
                private static void _MatsAndGoods1_OnLoaded(global::LightSwitchApplication.ГотовыеИзделия s, bool succeeded)
                {
                    s.MatsAndGoods1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities1",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Validate,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_CreateQuery,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_SelectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnCollectionChanged,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnLoaded);
                private static void _MatsAndGoodsQuantities1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities1, sf);
                }
                private static void _MatsAndGoodsQuantities1_Validate(global::LightSwitchApplication.ГотовыеИзделия s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities1_CreateQuery(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantities1Query();
                }
                private static void _MatsAndGoodsQuantities1_SelectionChanged(global::LightSwitchApplication.ГотовыеИзделия s)
                {
                    s.MatsAndGoodsQuantities1_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities1_OnCollectionChanged(global::LightSwitchApplication.ГотовыеИзделия s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities1_Changed(e);
                }
                private static void _MatsAndGoodsQuantities1_OnLoaded(global::LightSwitchApplication.ГотовыеИзделия s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, string>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.ГотовыеИзделия s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.ГотовыеИзделия s)
                {
                    s.Name_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._OkNewMAG_CreateExecutableObject);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkNewMAG_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.OkNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._CancelNewMAG_CreateExecutableObject);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelNewMAG_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.CancelNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    OkEdit = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "OkEdit",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._OkEdit_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._OkEdit_CreateExecutableObject);
                private static void _OkEdit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._OkEditCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkEdit_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.OkEdit.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._CancelEditMAG_CreateExecutableObject);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelEditMAG_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.CancelEditMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._gridAddAndEditNew_CreateExecutableObject);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.gridAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.CommandSetProperties._gridEditSelected_CreateExecutableObject);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridEditSelected_CreateExecutableObject(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ГотовыеИзделия.DetailsClass)d).Methods.gridEditSelected.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkNewMAG_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkNewMAG_InvokeMethod);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGMethod, sf);
                }
                private static global::System.Exception _OkNewMAG_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkNewMAG_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelNewMAG_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelNewMAG_InvokeMethod);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGMethod, sf);
                }
                private static global::System.Exception _CancelNewMAG_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelNewMAG_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    OkEdit = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "OkEdit",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkEdit_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkEdit_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._OkEdit_InvokeMethod);
                private static void _OkEdit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._OkEditMethod, sf);
                }
                private static global::System.Exception _OkEdit_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkEdit_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkEdit_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkEdit_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelEditMAG_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._CancelEditMAG_InvokeMethod);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGMethod, sf);
                }
                private static global::System.Exception _CancelEditMAG_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelEditMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelEditMAG_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelEditMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridAddAndEditNew_InvokeMethod);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _gridAddAndEditNew_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridAddAndEditNew_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridEditSelected_CanInvoke,
                        global::LightSwitchApplication.ГотовыеИзделия.DetailsClass.MethodSetProperties._gridEditSelected_InvokeMethod);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ГотовыеИзделия.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ГотовыеИзделия, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass>.Data> c, global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedMethod, sf);
                }
                private static global::System.Exception _gridEditSelected_CanInvoke(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridEditSelected_InvokeMethod(global::LightSwitchApplication.ГотовыеИзделия.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridEditSelected_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ИзготовлениеОтправка
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ИзготовлениеОтправка() : base("LightSwitchApplication.Sklad.DesktopClient:ИзготовлениеОтправка")
        {
            global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ИзготовлениеОтправка CreateInstance()
        {
            return new global::LightSwitchApplication.ИзготовлениеОтправка(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеОтправка_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void CraftAction_SelectionChanged();

        partial void CraftAction_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Loaded(bool succeeded);

        partial void Craft_SelectionChanged();

        partial void Craft_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Loaded(bool succeeded);

        partial void CraftFiller_SelectionChanged();

        partial void CraftFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Loaded(bool succeeded);

        partial void CraftAction1_SelectionChanged();

        partial void CraftAction1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction1_Loaded(bool succeeded);

        partial void Craft1_SelectionChanged();

        partial void Craft1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft1_Loaded(bool succeeded);

        partial void CraftFiller1_SelectionChanged();

        partial void CraftFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller1_Loaded(bool succeeded);

        partial void Skladi_SelectionChanged();

        partial void Skladi_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Loaded(bool succeeded);

        partial void Recipes_SelectionChanged();

        partial void Recipes_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Loaded(bool succeeded);

        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void RecipesComponents_SelectionChanged();

        partial void RecipesComponents_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Loaded(bool succeeded);

        partial void RecID_Changed();

        partial void MAGID_Changed();

        partial void RecComID_Changed();

        partial void TempID_Changed();

        partial void Status_Changed();

        partial void SkladName_Changed();

        partial void DateCreationMore_Changed();

        partial void ResponsibleName_Changed();

        partial void DateCreationLess_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов CraftAction. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftActionItem> CraftAction
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftAction);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Craft. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftItem> Craft
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Craft);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftFillerItem> CraftFiller
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftAction1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftActionItem> CraftAction1
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftAction1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Craft1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftItem> Craft1
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Craft1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftFillerItem> CraftFiller1
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Skladi. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> Skladi
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Skladi);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Recipes. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesItem> Recipes
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Recipes);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecipesComponents);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> RecID
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecID);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> MAGID
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.MAGID);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.MAGID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MAGID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> RecComID
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecComID);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecComID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecComID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> TempID
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.TempID);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.TempID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TempID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Status
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Status);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Status, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladName
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.SkladName);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.SkladName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> DateCreationMore
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationMore);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DateCreationMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ResponsibleName
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.ResponsibleName);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.ResponsibleName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ResponsibleName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> DateCreationLess
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationLess);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DateCreationLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана Calculate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Calculate()
        {
            this.Details.Methods.Calculate.CreateInvocation().Execute();
        }
        partial void Calculate_CanExecute(ref bool result);
        partial void Calculate_Execute();

        /// <summary>
        /// Вызывает метод экрана CraftActionItemListAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CraftActionItemListAddAndEditNew()
        {
            this.Details.Methods.CraftActionItemListAddAndEditNew.CreateInvocation().Execute();
        }
        partial void CraftActionItemListAddAndEditNew_CanExecute(ref bool result);
        partial void CraftActionItemListAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана NewCraftOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewCraftOk()
        {
            this.Details.Methods.NewCraftOk.CreateInvocation().Execute();
        }
        partial void NewCraftOk_CanExecute(ref bool result);
        partial void NewCraftOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewCraftCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewCraftCancel()
        {
            this.Details.Methods.NewCraftCancel.CreateInvocation().Execute();
        }
        partial void NewCraftCancel_CanExecute(ref bool result);
        partial void NewCraftCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана Clear.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Clear()
        {
            this.Details.Methods.Clear.CreateInvocation().Execute();
        }
        partial void Clear_CanExecute(ref bool result);
        partial void Clear_Execute();

        /// <summary>
        /// Вызывает метод экрана CraftActionItemListDeleteSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CraftActionItemListDeleteSelected()
        {
            this.Details.Methods.CraftActionItemListDeleteSelected.CreateInvocation().Execute();
        }
        partial void CraftActionItemListDeleteSelected_CanExecute(ref bool result);
        partial void CraftActionItemListDeleteSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelApply()
        {
            this.Details.Methods.CancelApply.CreateInvocation().Execute();
        }
        partial void CancelApply_CanExecute(ref bool result);
        partial void CancelApply_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        /// <summary>
        /// Вызывает метод экрана AddAsWas.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAsWas()
        {
            this.Details.Methods.AddAsWas.CreateInvocation().Execute();
        }
        partial void AddAsWas_CanExecute(ref bool result);
        partial void AddAsWas_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySet, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSet, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftAction;
                var initializeCommandEntry = global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.Calculate;
                var initializeMethodEntry = global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.Calculate;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                __ИзготовлениеОтправкаEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeSavingEvent,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeSavedEvent,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeClosingEvent,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeCreated,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeActivated,
                    global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.__ИзготовлениеОтправка_InvokeSaveErrorEvent);
            private static void __ИзготовлениеОтправка_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ИзготовлениеОтправка_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ИзготовлениеОтправка_InvokeSavingEvent(global::LightSwitchApplication.ИзготовлениеОтправка s)
            {
                bool handled = false;
                s.ИзготовлениеОтправка_Saving(ref handled);
                return handled;
            }
            private static void __ИзготовлениеОтправка_InvokeSavedEvent(global::LightSwitchApplication.ИзготовлениеОтправка s)
            {
                s.ИзготовлениеОтправка_Saved();
            }
            private static bool __ИзготовлениеОтправка_InvokeClosingEvent(global::LightSwitchApplication.ИзготовлениеОтправка s)
            {
                bool cancel = false;
                s.ИзготовлениеОтправка_Closing(ref cancel);
                return cancel;
            }
            private static void __ИзготовлениеОтправка_InvokeCreated(global::LightSwitchApplication.ИзготовлениеОтправка s)
            {
                s.ИзготовлениеОтправка_Created();
            }
            private static void __ИзготовлениеОтправка_InvokeActivated(global::LightSwitchApplication.ИзготовлениеОтправка s)
            {
                s.ИзготовлениеОтправка_Activated();
            }
            private static bool __ИзготовлениеОтправка_InvokeSaveErrorEvent(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Exception ex)
            {
                bool handled = false;
                s.ИзготовлениеОтправка_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftActionQuery(string Status, string SkladName, global::System.Nullable<global::System.DateTime> DateCreationMore, global::System.Nullable<global::System.DateTime> DateCreationLess, string ResponsibleName)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.OrderByDescending(
                            global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                                this.Screen.DataWorkspace.skladData.CraftAction,
                                (c) => (((((((c.Status.CompareTo("Изготавливается") == 0) || (c.Status.CompareTo("Завершен") == 0)) && ((Status == null) || c.Status.Contains(Status))) && ((SkladName == null) || c.SkladiItem.Name.Contains(SkladName))) && ((DateCreationMore.HasValue == false) || (DateCreationMore.HasValue && (c.DateCreation >= DateCreationMore)))) && ((DateCreationLess.HasValue == false) || (DateCreationLess.HasValue && (c.DateCreation <= DateCreationLess)))) && ((ResponsibleName == null) || c.ResponsibleItem.Name.Contains(ResponsibleName)))),
                            (c) => c.ID),
                        "SkladiItem"),
                    "ResponsibleItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.Craft).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "RecipesItem"),
                    "RecipesItem.MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftFillerQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.CraftFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftAction1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.CraftAction,
                            (c) => (c.ID == 0m)),
                        "SkladiItem"),
                    "ResponsibleItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Craft1Query()
            {
                if (this.Screen.CraftAction1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction1.SelectedItem.Details.Properties.Craft).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            loader,
                            (c) => (c.ID == 0m)),
                        "RecipesItem"),
                    "RecipesItem.MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftFiller1Query(global::System.Nullable<decimal> ID)
            {
                if (this.Screen.CraftAction1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction1.SelectedItem.Details.Properties.CraftFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        loader,
                        (c) => ((ID.HasValue == false) || (ID.HasValue && (c.ID == ID)))),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Skladi,
                    (s) => (s.Status.CompareTo("Функционирует") == 0));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesQuery(global::System.Nullable<decimal> ID)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Recipes,
                    (r) => (ID.HasValue && (r.ID == ID)));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery(global::System.Nullable<decimal> ID)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.MatsAndGoods,
                    (m) => (ID.HasValue && (m.ID == ID)));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponentsQuery(global::System.Nullable<decimal> ID)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.RecipesComponents,
                    (r) => (ID.HasValue && (r.RecipesItem.ID == ID)));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data _CraftAction;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Data _Craft;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data _CraftFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data _CraftAction1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Data _Craft1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data _CraftFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _Skladi;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data _Recipes;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data _RecID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data _MAGID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data _RecComID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data _TempID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data _Status;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data _SkladName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _DateCreationMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data _ResponsibleName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _DateCreationLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CalculateCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CraftActionItemListAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _NewCraftOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _NewCraftCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _ClearCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CraftActionItemListDeleteSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CancelApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _AddAsWasCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CalculateMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CraftActionItemListAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _NewCraftOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _NewCraftCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _ClearMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CraftActionItemListDeleteSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _CancelApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _SearchCloseMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data _AddAsWasMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem> CraftAction
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftAction);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem> Craft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Craft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem> CraftFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem> CraftAction1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftAction1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem> Craft1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Craft1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem> CraftFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.CraftFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem> Skladi
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Skladi);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem> Recipes
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Recipes);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecipesComponents);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>> RecID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>> MAGID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.MAGID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>> RecComID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.RecComID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>> TempID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.TempID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string> Status
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.Status);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string> SkladName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.SkladName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>> DateCreationMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string> ResponsibleName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.ResponsibleName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>> DateCreationLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties.DateCreationLess);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> Calculate
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.Calculate);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CraftActionItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.CraftActionItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> NewCraftOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.NewCraftOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> NewCraftCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.NewCraftCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> Clear
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.Clear);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CraftActionItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.CraftActionItemListDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties.AddAsWas);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> Calculate
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.Calculate);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CraftActionItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.CraftActionItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> NewCraftOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.NewCraftOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> NewCraftCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.NewCraftCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> Clear
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.Clear);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CraftActionItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.CraftActionItemListDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties.AddAsWas);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry
                    CraftAction = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry(
                        "CraftAction",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction_OnLoaded);
                private static void _CraftAction_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftAction, sf);
                }
                private static void _CraftAction_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftAction_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftAction_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.CraftActionQuery((string)args[0], (string)args[1], (global::System.Nullable<global::System.DateTime>)args[2], (global::System.Nullable<global::System.DateTime>)args[3], (string)args[4]);
                }
                private static void _CraftAction_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.CraftAction_SelectionChanged();
                }
                private static void _CraftAction_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftAction_Changed(e);
                }
                private static void _CraftAction_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.CraftAction_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry
                    Craft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry(
                        "Craft",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft_OnLoaded);
                private static void _Craft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Craft, sf);
                }
                private static void _Craft_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Craft_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Craft_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.CraftQuery();
                }
                private static void _Craft_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.Craft_SelectionChanged();
                }
                private static void _Craft_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Craft_Changed(e);
                }
                private static void _Craft_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.Craft_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry
                    CraftFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry(
                        "CraftFiller",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller_OnLoaded);
                private static void _CraftFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftFiller, sf);
                }
                private static void _CraftFiller_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftFiller_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.CraftFillerQuery();
                }
                private static void _CraftFiller_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.CraftFiller_SelectionChanged();
                }
                private static void _CraftFiller_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftFiller_Changed(e);
                }
                private static void _CraftFiller_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.CraftFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry
                    CraftAction1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry(
                        "CraftAction1",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftAction1_OnLoaded);
                private static void _CraftAction1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftAction1, sf);
                }
                private static void _CraftAction1_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftAction1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftAction1_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.CraftAction1Query();
                }
                private static void _CraftAction1_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.CraftAction1_SelectionChanged();
                }
                private static void _CraftAction1_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftAction1_Changed(e);
                }
                private static void _CraftAction1_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.CraftAction1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry
                    Craft1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry(
                        "Craft1",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Craft1_OnLoaded);
                private static void _Craft1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Craft1, sf);
                }
                private static void _Craft1_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Craft1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Craft1_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.Craft1Query();
                }
                private static void _Craft1_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.Craft1_SelectionChanged();
                }
                private static void _Craft1_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Craft1_Changed(e);
                }
                private static void _Craft1_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.Craft1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry
                    CraftFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry(
                        "CraftFiller1",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._CraftFiller1_OnLoaded);
                private static void _CraftFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftFiller1, sf);
                }
                private static void _CraftFiller1_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftFiller1_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.CraftFiller1Query((global::System.Nullable<decimal>)args[0]);
                }
                private static void _CraftFiller1_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.CraftFiller1_SelectionChanged();
                }
                private static void _CraftFiller1_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftFiller1_Changed(e);
                }
                private static void _CraftFiller1_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.CraftFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    Skladi = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "Skladi",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Skladi_OnLoaded);
                private static void _Skladi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Skladi, sf);
                }
                private static void _Skladi_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Skladi_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Skladi_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.SkladiQuery();
                }
                private static void _Skladi_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.Skladi_SelectionChanged();
                }
                private static void _Skladi_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Skladi_Changed(e);
                }
                private static void _Skladi_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.Skladi_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry
                    Recipes = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry(
                        "Recipes",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Recipes_OnLoaded);
                private static void _Recipes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Recipes, sf);
                }
                private static void _Recipes_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Recipes_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Recipes_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.RecipesQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _Recipes_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.Recipes_SelectionChanged();
                }
                private static void _Recipes_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Recipes_Changed(e);
                }
                private static void _Recipes_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.Recipes_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecipesComponents_OnLoaded);
                private static void _RecipesComponents_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents, sf);
                }
                private static void _RecipesComponents_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents_CreateQuery(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object[] args)
                {
                    return d.RecipesComponentsQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _RecipesComponents_SelectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.RecipesComponents_SelectionChanged();
                }
                private static void _RecipesComponents_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents_Changed(e);
                }
                private static void _RecipesComponents_OnLoaded(global::LightSwitchApplication.ИзготовлениеОтправка s, bool succeeded)
                {
                    s.RecipesComponents_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry
                    RecID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "RecID",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecID_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecID_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecID_OnValueChanged);
                private static void _RecID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._RecID, sf);
                }
                private static void _RecID_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecID_Validate(r);
                }
                private static void _RecID_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.RecID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry
                    MAGID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "MAGID",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MAGID_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MAGID_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._MAGID_OnValueChanged);
                private static void _MAGID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._MAGID, sf);
                }
                private static void _MAGID_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MAGID_Validate(r);
                }
                private static void _MAGID_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.MAGID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry
                    RecComID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "RecComID",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecComID_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecComID_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._RecComID_OnValueChanged);
                private static void _RecComID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._RecComID, sf);
                }
                private static void _RecComID_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecComID_Validate(r);
                }
                private static void _RecComID_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.RecComID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry
                    TempID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "TempID",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._TempID_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._TempID_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._TempID_OnValueChanged);
                private static void _TempID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._TempID, sf);
                }
                private static void _TempID_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.TempID_Validate(r);
                }
                private static void _TempID_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.TempID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry
                    Status = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry(
                        "Status",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Status_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Status_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._Status_OnValueChanged);
                private static void _Status_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Status, sf);
                }
                private static void _Status_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Status_Validate(r);
                }
                private static void _Status_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.Status_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry
                    SkladName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry(
                        "SkladName",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._SkladName_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._SkladName_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._SkladName_OnValueChanged);
                private static void _SkladName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladName, sf);
                }
                private static void _SkladName_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladName_Validate(r);
                }
                private static void _SkladName_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.SkladName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    DateCreationMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "DateCreationMore",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationMore_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationMore_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationMore_OnValueChanged);
                private static void _DateCreationMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._DateCreationMore, sf);
                }
                private static void _DateCreationMore_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.DateCreationMore_Validate(r);
                }
                private static void _DateCreationMore_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.DateCreationMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry
                    ResponsibleName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Entry(
                        "ResponsibleName",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._ResponsibleName_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._ResponsibleName_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._ResponsibleName_OnValueChanged);
                private static void _ResponsibleName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ResponsibleName, sf);
                }
                private static void _ResponsibleName_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ResponsibleName_Validate(r);
                }
                private static void _ResponsibleName_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.ResponsibleName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    DateCreationLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "DateCreationLess",
                        false,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationLess_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationLess_Validate,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.PropertySetProperties._DateCreationLess_OnValueChanged);
                private static void _DateCreationLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._DateCreationLess, sf);
                }
                private static void _DateCreationLess_Validate(global::LightSwitchApplication.ИзготовлениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.DateCreationLess_Validate(r);
                }
                private static void _DateCreationLess_OnValueChanged(global::LightSwitchApplication.ИзготовлениеОтправка s)
                {
                    s.DateCreationLess_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    Calculate = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "Calculate",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._Calculate_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._Calculate_CreateExecutableObject);
                private static void _Calculate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CalculateCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Calculate_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.Calculate.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CraftActionItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CraftActionItemListAddAndEditNew",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CraftActionItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CraftActionItemListAddAndEditNew_CreateExecutableObject);
                private static void _CraftActionItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftActionItemListAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CraftActionItemListAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.CraftActionItemListAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    NewCraftOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "NewCraftOk",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._NewCraftOk_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._NewCraftOk_CreateExecutableObject);
                private static void _NewCraftOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewCraftOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewCraftOk_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.NewCraftOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    NewCraftCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "NewCraftCancel",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._NewCraftCancel_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._NewCraftCancel_CreateExecutableObject);
                private static void _NewCraftCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewCraftCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewCraftCancel_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.NewCraftCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    Clear = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "Clear",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._Clear_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._Clear_CreateExecutableObject);
                private static void _Clear_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ClearCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Clear_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.Clear.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CraftActionItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CraftActionItemListDeleteSelected",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CraftActionItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CraftActionItemListDeleteSelected_CreateExecutableObject);
                private static void _CraftActionItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftActionItemListDeleteSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CraftActionItemListDeleteSelected_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.CraftActionItemListDeleteSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._CancelApply_CreateExecutableObject);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelApply_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.CancelApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.CommandSetProperties._AddAsWas_CreateExecutableObject);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddAsWas_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass)d).Methods.AddAsWas.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    Calculate = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "Calculate",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Calculate_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Calculate_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Calculate_InvokeMethod);
                private static void _Calculate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CalculateMethod, sf);
                }
                private static global::System.Exception _Calculate_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Calculate_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Calculate_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Calculate_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CraftActionItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CraftActionItemListAddAndEditNew",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListAddAndEditNew_InvokeMethod);
                private static void _CraftActionItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftActionItemListAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _CraftActionItemListAddAndEditNew_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CraftActionItemListAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CraftActionItemListAddAndEditNew_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CraftActionItemListAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    NewCraftOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "NewCraftOk",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftOk_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftOk_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftOk_InvokeMethod);
                private static void _NewCraftOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewCraftOkMethod, sf);
                }
                private static global::System.Exception _NewCraftOk_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewCraftOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewCraftOk_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewCraftOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    NewCraftCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "NewCraftCancel",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftCancel_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftCancel_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._NewCraftCancel_InvokeMethod);
                private static void _NewCraftCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewCraftCancelMethod, sf);
                }
                private static global::System.Exception _NewCraftCancel_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewCraftCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewCraftCancel_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewCraftCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    Clear = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "Clear",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Clear_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Clear_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._Clear_InvokeMethod);
                private static void _Clear_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ClearMethod, sf);
                }
                private static global::System.Exception _Clear_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Clear_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Clear_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Clear_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CraftActionItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CraftActionItemListDeleteSelected",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListDeleteSelected_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CraftActionItemListDeleteSelected_InvokeMethod);
                private static void _CraftActionItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftActionItemListDeleteSelectedMethod, sf);
                }
                private static global::System.Exception _CraftActionItemListDeleteSelected_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CraftActionItemListDeleteSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CraftActionItemListDeleteSelected_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CraftActionItemListDeleteSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CancelApply_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._CancelApply_InvokeMethod);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyMethod, sf);
                }
                private static global::System.Exception _CancelApply_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelApply_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_InvokeMethod);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеОтправка, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasMethod, sf);
                }
                private static global::System.Exception _AddAsWas_CanInvoke(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddAsWas_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddAsWas_InvokeMethod(global::LightSwitchApplication.ИзготовлениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddAsWas_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ИзготовлениеПриход
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ИзготовлениеПриход() : base("LightSwitchApplication.Sklad.DesktopClient:ИзготовлениеПриход")
        {
            global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ИзготовлениеПриход CreateInstance()
        {
            return new global::LightSwitchApplication.ИзготовлениеПриход(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ИзготовлениеПриход_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void CraftAction_SelectionChanged();

        partial void CraftAction_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Loaded(bool succeeded);

        partial void Craft_SelectionChanged();

        partial void Craft_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Loaded(bool succeeded);

        partial void CraftFiller_SelectionChanged();

        partial void CraftFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Loaded(bool succeeded);

        partial void Status_Changed();

        partial void SkladName_Changed();

        partial void DateCreation_Changed();

        partial void DateCreationLess_Changed();

        partial void ResponsibleName_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов CraftAction. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftActionItem> CraftAction
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.CraftAction);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftAction_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Craft. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftItem> Craft
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.Craft);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Craft_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов CraftFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.CraftFillerItem> CraftFiller
        {
            get
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.CraftFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CraftFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Status
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.Status);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.Status, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladName
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.SkladName);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.SkladName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> DateCreation
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreation);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreation, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DateCreation_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> DateCreationLess
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreationLess);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreationLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DateCreationLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ResponsibleName
        {
            get 
            {
                return global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.GetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.ResponsibleName);
            }
            set
            {
                global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.SetValue(this, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.ResponsibleName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ResponsibleName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана FinishCraft.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void FinishCraft()
        {
            this.Details.Methods.FinishCraft.CreateInvocation().Execute();
        }
        partial void FinishCraft_CanExecute(ref bool result);
        partial void FinishCraft_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelAppy.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelAppy()
        {
            this.Details.Methods.CancelAppy.CreateInvocation().Execute();
        }
        partial void CancelAppy_CanExecute(ref bool result);
        partial void CancelAppy_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySet, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSet, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.CraftAction;
                var initializeCommandEntry = global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.FinishCraft;
                var initializeMethodEntry = global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.FinishCraft;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                __ИзготовлениеПриходEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeSavingEvent,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeSavedEvent,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeClosingEvent,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeCreated,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeActivated,
                    global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.__ИзготовлениеПриход_InvokeSaveErrorEvent);
            private static void __ИзготовлениеПриход_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ИзготовлениеПриход s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ИзготовлениеПриход_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ИзготовлениеПриход_InvokeSavingEvent(global::LightSwitchApplication.ИзготовлениеПриход s)
            {
                bool handled = false;
                s.ИзготовлениеПриход_Saving(ref handled);
                return handled;
            }
            private static void __ИзготовлениеПриход_InvokeSavedEvent(global::LightSwitchApplication.ИзготовлениеПриход s)
            {
                s.ИзготовлениеПриход_Saved();
            }
            private static bool __ИзготовлениеПриход_InvokeClosingEvent(global::LightSwitchApplication.ИзготовлениеПриход s)
            {
                bool cancel = false;
                s.ИзготовлениеПриход_Closing(ref cancel);
                return cancel;
            }
            private static void __ИзготовлениеПриход_InvokeCreated(global::LightSwitchApplication.ИзготовлениеПриход s)
            {
                s.ИзготовлениеПриход_Created();
            }
            private static void __ИзготовлениеПриход_InvokeActivated(global::LightSwitchApplication.ИзготовлениеПриход s)
            {
                s.ИзготовлениеПриход_Activated();
            }
            private static bool __ИзготовлениеПриход_InvokeSaveErrorEvent(global::LightSwitchApplication.ИзготовлениеПриход s, global::System.Exception ex)
            {
                bool handled = false;
                s.ИзготовлениеПриход_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftActionQuery(string Status, string SkladName, global::System.Nullable<global::System.DateTime> DateCreationMore, global::System.Nullable<global::System.DateTime> DateCreationLess, string ResponsibleName)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.CraftAction,
                            (c) => (((((((c.Status.CompareTo("Завершен") == 0) || (c.Status.CompareTo("Изготавливается") == 0)) && ((Status == null) || c.Status.Contains(Status))) && ((SkladName == null) || c.SkladiItem.Name.Contains(SkladName))) && ((DateCreationMore.HasValue == false) || (DateCreationMore.HasValue && (c.DateCreation >= DateCreationMore)))) && ((DateCreationLess.HasValue == false) || (DateCreationLess.HasValue && (c.DateCreation <= DateCreationLess)))) && ((ResponsibleName == null) || c.ResponsibleItem.Name.Contains(ResponsibleName)))),
                        "SkladiItem"),
                    "ResponsibleItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.Craft).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "RecipesItem"),
                    "RecipesItem.MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable CraftFillerQuery()
            {
                if (this.Screen.CraftAction.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.CraftFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.CraftAction.SelectedItem.Details.Properties.CraftFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data _CraftAction;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem>.Data _Craft;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data _CraftFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data _Status;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data _SkladName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _DateCreation;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _DateCreationLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data _ResponsibleName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _FinishCraftCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _CancelAppyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _FinishCraftMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _CancelAppyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data _SearchCloseMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem> CraftAction
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.CraftAction);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem> Craft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.Craft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem> CraftFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.CraftFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string> Status
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.Status);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string> SkladName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.SkladName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>> DateCreation
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreation);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>> DateCreationLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.DateCreationLess);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string> ResponsibleName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties.ResponsibleName);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> FinishCraft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.FinishCraft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> CancelAppy
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.CancelAppy);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> FinishCraft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.FinishCraft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> CancelAppy
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.CancelAppy);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>)base.GetItem(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry
                    CraftAction = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Entry(
                        "CraftAction",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftAction_OnLoaded);
                private static void _CraftAction_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftActionItem>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftAction, sf);
                }
                private static void _CraftAction_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftAction_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftAction_CreateQuery(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object[] args)
                {
                    return d.CraftActionQuery((string)args[0], (string)args[1], (global::System.Nullable<global::System.DateTime>)args[2], (global::System.Nullable<global::System.DateTime>)args[3], (string)args[4]);
                }
                private static void _CraftAction_SelectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.CraftAction_SelectionChanged();
                }
                private static void _CraftAction_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftAction_Changed(e);
                }
                private static void _CraftAction_OnLoaded(global::LightSwitchApplication.ИзготовлениеПриход s, bool succeeded)
                {
                    s.CraftAction_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry
                    Craft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem>.Entry(
                        "Craft",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Craft_OnLoaded);
                private static void _Craft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftItem>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._Craft, sf);
                }
                private static void _Craft_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Craft_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Craft_CreateQuery(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object[] args)
                {
                    return d.CraftQuery();
                }
                private static void _Craft_SelectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.Craft_SelectionChanged();
                }
                private static void _Craft_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Craft_Changed(e);
                }
                private static void _Craft_OnLoaded(global::LightSwitchApplication.ИзготовлениеПриход s, bool succeeded)
                {
                    s.Craft_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry
                    CraftFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Entry(
                        "CraftFiller",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_CreateQuery,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_SelectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._CraftFiller_OnLoaded);
                private static void _CraftFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::LightSwitchApplication.CraftFillerItem>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._CraftFiller, sf);
                }
                private static void _CraftFiller_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CraftFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _CraftFiller_CreateQuery(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object[] args)
                {
                    return d.CraftFillerQuery();
                }
                private static void _CraftFiller_SelectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.CraftFiller_SelectionChanged();
                }
                private static void _CraftFiller_OnCollectionChanged(global::LightSwitchApplication.ИзготовлениеПриход s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.CraftFiller_Changed(e);
                }
                private static void _CraftFiller_OnLoaded(global::LightSwitchApplication.ИзготовлениеПриход s, bool succeeded)
                {
                    s.CraftFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry
                    Status = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry(
                        "Status",
                        false,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Status_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Status_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._Status_OnValueChanged);
                private static void _Status_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._Status, sf);
                }
                private static void _Status_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Status_Validate(r);
                }
                private static void _Status_OnValueChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.Status_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry
                    SkladName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry(
                        "SkladName",
                        false,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._SkladName_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._SkladName_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._SkladName_OnValueChanged);
                private static void _SkladName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladName, sf);
                }
                private static void _SkladName_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladName_Validate(r);
                }
                private static void _SkladName_OnValueChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.SkladName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    DateCreation = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "DateCreation",
                        false,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreation_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreation_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreation_OnValueChanged);
                private static void _DateCreation_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._DateCreation, sf);
                }
                private static void _DateCreation_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.DateCreation_Validate(r);
                }
                private static void _DateCreation_OnValueChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.DateCreation_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    DateCreationLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "DateCreationLess",
                        false,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreationLess_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreationLess_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._DateCreationLess_OnValueChanged);
                private static void _DateCreationLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._DateCreationLess, sf);
                }
                private static void _DateCreationLess_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.DateCreationLess_Validate(r);
                }
                private static void _DateCreationLess_OnValueChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.DateCreationLess_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry
                    ResponsibleName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Entry(
                        "ResponsibleName",
                        false,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._ResponsibleName_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._ResponsibleName_Validate,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.PropertySetProperties._ResponsibleName_OnValueChanged);
                private static void _ResponsibleName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, string>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._ResponsibleName, sf);
                }
                private static void _ResponsibleName_Validate(global::LightSwitchApplication.ИзготовлениеПриход s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ResponsibleName_Validate(r);
                }
                private static void _ResponsibleName_OnValueChanged(global::LightSwitchApplication.ИзготовлениеПриход s)
                {
                    s.ResponsibleName_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    FinishCraft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "FinishCraft",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._FinishCraft_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._FinishCraft_CreateExecutableObject);
                private static void _FinishCraft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._FinishCraftCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _FinishCraft_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass)d).Methods.FinishCraft.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    CancelAppy = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "CancelAppy",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._CancelAppy_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._CancelAppy_CreateExecutableObject);
                private static void _CancelAppy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelAppyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelAppy_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass)d).Methods.CancelAppy.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    FinishCraft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "FinishCraft",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._FinishCraft_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._FinishCraft_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._FinishCraft_InvokeMethod);
                private static void _FinishCraft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._FinishCraftMethod, sf);
                }
                private static global::System.Exception _FinishCraft_CanInvoke(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.FinishCraft_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _FinishCraft_InvokeMethod(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.FinishCraft_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    CancelAppy = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "CancelAppy",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._CancelAppy_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._CancelAppy_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._CancelAppy_InvokeMethod);
                private static void _CancelAppy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelAppyMethod, sf);
                }
                private static global::System.Exception _CancelAppy_CanInvoke(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelAppy_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelAppy_InvokeMethod(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelAppy_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ИзготовлениеПриход, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass>.Data> c, global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.ИзготовлениеПриход.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Материалы
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Материалы() : base("LightSwitchApplication.Sklad.DesktopClient:Материалы")
        {
            global::LightSwitchApplication.Материалы.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Материалы CreateInstance()
        {
            return new global::LightSwitchApplication.Материалы(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Материалы_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void MatsAndGoods1_SelectionChanged();

        partial void MatsAndGoods1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities1_SelectionChanged();

        partial void MatsAndGoodsQuantities1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Loaded(bool succeeded);

        partial void Name_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.Материалы.DetailsClass.GetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.Материалы.DetailsClass.GetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
        {
            get
            {
                return global::LightSwitchApplication.Материалы.DetailsClass.GetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoods1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
        {
            get
            {
                return global::LightSwitchApplication.Материалы.DetailsClass.GetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Материалы.DetailsClass.GetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Материалы.DetailsClass.SetValue(this, global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана OkNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkNewMAG()
        {
            this.Details.Methods.OkNewMAG.CreateInvocation().Execute();
        }
        partial void OkNewMAG_CanExecute(ref bool result);
        partial void OkNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelNewMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelNewMAG()
        {
            this.Details.Methods.CancelNewMAG.CreateInvocation().Execute();
        }
        partial void CancelNewMAG_CanExecute(ref bool result);
        partial void CancelNewMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана EditMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void EditMAG()
        {
            this.Details.Methods.EditMAG.CreateInvocation().Execute();
        }
        partial void EditMAG_CanExecute(ref bool result);
        partial void EditMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelEditMAG.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelEditMAG()
        {
            this.Details.Methods.CancelEditMAG.CreateInvocation().Execute();
        }
        partial void CancelEditMAG_CanExecute(ref bool result);
        partial void CancelEditMAG_Execute();

        /// <summary>
        /// Вызывает метод экрана gridAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridAddAndEditNew()
        {
            this.Details.Methods.gridAddAndEditNew.CreateInvocation().Execute();
        }
        partial void gridAddAndEditNew_CanExecute(ref bool result);
        partial void gridAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана gridEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridEditSelected()
        {
            this.Details.Methods.gridEditSelected.CreateInvocation().Execute();
        }
        partial void gridEditSelected_CanExecute(ref bool result);
        partial void gridEditSelected_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.Материалы.DetailsClass.PropertySet, global::LightSwitchApplication.Материалы.DetailsClass.CommandSet, global::LightSwitchApplication.Материалы.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoods;
                var initializeCommandEntry = global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.OkNewMAG;
                var initializeMethodEntry = global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.OkNewMAG;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                __МатериалыEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeSavingEvent,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeSavedEvent,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeClosingEvent,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeCreated,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeActivated,
                    global::LightSwitchApplication.Материалы.DetailsClass.__Материалы_InvokeSaveErrorEvent);
            private static void __Материалы_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Материалы s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Материалы_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Материалы_InvokeSavingEvent(global::LightSwitchApplication.Материалы s)
            {
                bool handled = false;
                s.Материалы_Saving(ref handled);
                return handled;
            }
            private static void __Материалы_InvokeSavedEvent(global::LightSwitchApplication.Материалы s)
            {
                s.Материалы_Saved();
            }
            private static bool __Материалы_InvokeClosingEvent(global::LightSwitchApplication.Материалы s)
            {
                bool cancel = false;
                s.Материалы_Closing(ref cancel);
                return cancel;
            }
            private static void __Материалы_InvokeCreated(global::LightSwitchApplication.Материалы s)
            {
                s.Материалы_Created();
            }
            private static void __Материалы_InvokeActivated(global::LightSwitchApplication.Материалы s)
            {
                s.Материалы_Activated();
            }
            private static bool __Материалы_InvokeSaveErrorEvent(global::LightSwitchApplication.Материалы s, global::System.Exception ex)
            {
                bool handled = false;
                s.Материалы_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Материалы.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Материалы.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Материалы.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.MatsAndGoods,
                        (m) => ((m.Category.CompareTo("Материал") == 0) && ((Name == null) || m.Name.Contains(Name)))),
                    (m) => m.Name);
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery(string SkladName)
            {
                if (this.Screen.MatsAndGoods.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            loader,
                            (m) => ((m.SkladiItem.Status.CompareTo("Функционирует") == 0) && ((SkladName == null) || m.SkladiItem.Name.Contains(SkladName)))),
                        (m) => m.MatsAndGoodsItem.Name),
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoods1Query()
            {
                return this.Screen.DataWorkspace.skladData.MatsAndGoods;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantities1Query()
            {
                if (this.Screen.MatsAndGoods1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.MatsAndGoods1.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    loader,
                    (m) => (m.SkladiItem.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _OkNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _CancelNewMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _EditMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _CancelEditMAGCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _gridAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _gridEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _OkNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _CancelNewMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _EditMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _CancelEditMAGMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _gridAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data _gridEditSelectedMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoods1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties.Name);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> EditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.EditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> OkNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.OkNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> CancelNewMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.CancelNewMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> EditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.EditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> CancelEditMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.CancelEditMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>)base.GetItem(global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties.gridEditSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.Материалы s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.Материалы.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery((string)args[0]);
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.Материалы s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.Материалы s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.Материалы s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.Материалы s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.Материалы.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery((string)args[0]);
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.Материалы s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.Материалы s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.Материалы s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods1",
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_Validate,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_CreateQuery,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_SelectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_OnCollectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoods1_OnLoaded);
                private static void _MatsAndGoods1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods1, sf);
                }
                private static void _MatsAndGoods1_Validate(global::LightSwitchApplication.Материалы s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods1_CreateQuery(global::LightSwitchApplication.Материалы.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoods1Query();
                }
                private static void _MatsAndGoods1_SelectionChanged(global::LightSwitchApplication.Материалы s)
                {
                    s.MatsAndGoods1_SelectionChanged();
                }
                private static void _MatsAndGoods1_OnCollectionChanged(global::LightSwitchApplication.Материалы s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods1_Changed(e);
                }
                private static void _MatsAndGoods1_OnLoaded(global::LightSwitchApplication.Материалы s, bool succeeded)
                {
                    s.MatsAndGoods1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities1",
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_Validate,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_CreateQuery,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_SelectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnCollectionChanged,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities1_OnLoaded);
                private static void _MatsAndGoodsQuantities1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities1, sf);
                }
                private static void _MatsAndGoodsQuantities1_Validate(global::LightSwitchApplication.Материалы s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities1_CreateQuery(global::LightSwitchApplication.Материалы.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantities1Query();
                }
                private static void _MatsAndGoodsQuantities1_SelectionChanged(global::LightSwitchApplication.Материалы s)
                {
                    s.MatsAndGoodsQuantities1_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities1_OnCollectionChanged(global::LightSwitchApplication.Материалы s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities1_Changed(e);
                }
                private static void _MatsAndGoodsQuantities1_OnLoaded(global::LightSwitchApplication.Материалы s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Материалы.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass, string>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Материалы s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Материалы s)
                {
                    s.Name_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._OkNewMAG_CreateExecutableObject);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkNewMAG_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.OkNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._CancelNewMAG_CreateExecutableObject);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelNewMAG_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.CancelNewMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    EditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "EditMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._EditMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._EditMAG_CreateExecutableObject);
                private static void _EditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._EditMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _EditMAG_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.EditMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._CancelEditMAG_CreateExecutableObject);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelEditMAG_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.CancelEditMAG.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._gridAddAndEditNew_CreateExecutableObject);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.gridAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.CommandSetProperties._gridEditSelected_CreateExecutableObject);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridEditSelected_CreateExecutableObject(global::LightSwitchApplication.Материалы.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Материалы.DetailsClass)d).Methods.gridEditSelected.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    OkNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "OkNewMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._OkNewMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._OkNewMAG_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._OkNewMAG_InvokeMethod);
                private static void _OkNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._OkNewMAGMethod, sf);
                }
                private static global::System.Exception _OkNewMAG_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkNewMAG_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    CancelNewMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "CancelNewMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelNewMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelNewMAG_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelNewMAG_InvokeMethod);
                private static void _CancelNewMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelNewMAGMethod, sf);
                }
                private static global::System.Exception _CancelNewMAG_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelNewMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelNewMAG_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelNewMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    EditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "EditMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._EditMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._EditMAG_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._EditMAG_InvokeMethod);
                private static void _EditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._EditMAGMethod, sf);
                }
                private static global::System.Exception _EditMAG_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.EditMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _EditMAG_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.EditMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    CancelEditMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "CancelEditMAG",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelEditMAG_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelEditMAG_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._CancelEditMAG_InvokeMethod);
                private static void _CancelEditMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelEditMAGMethod, sf);
                }
                private static global::System.Exception _CancelEditMAG_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelEditMAG_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelEditMAG_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelEditMAG_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridAddAndEditNew_InvokeMethod);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _gridAddAndEditNew_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridEditSelected_CanInvoke,
                        global::LightSwitchApplication.Материалы.DetailsClass.MethodSetProperties._gridEditSelected_InvokeMethod);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Материалы.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Материалы, global::LightSwitchApplication.Материалы.DetailsClass>.Data> c, global::LightSwitchApplication.Материалы.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedMethod, sf);
                }
                private static global::System.Exception _gridEditSelected_CanInvoke(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridEditSelected_InvokeMethod(global::LightSwitchApplication.Материалы.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridEditSelected_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Остатки
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Остатки() : base("LightSwitchApplication.Sklad.DesktopClient:Остатки")
        {
            global::LightSwitchApplication.Остатки.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Остатки CreateInstance()
        {
            return new global::LightSwitchApplication.Остатки(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Остатки_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void Name_Changed();

        partial void NameSklad_Changed();

        partial void NameMAG_Changed();

        partial void Quantity_Changed();

        partial void Quantity1_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Остатки.DetailsClass.SetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NameSklad
        {
            get 
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameSklad);
            }
            set
            {
                global::LightSwitchApplication.Остатки.DetailsClass.SetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameSklad, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NameSklad_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NameMAG
        {
            get 
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameMAG);
            }
            set
            {
                global::LightSwitchApplication.Остатки.DetailsClass.SetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameMAG, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NameMAG_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> Quantity
        {
            get 
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity);
            }
            set
            {
                global::LightSwitchApplication.Остатки.DetailsClass.SetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Quantity_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> Quantity1
        {
            get 
            {
                return global::LightSwitchApplication.Остатки.DetailsClass.GetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity1);
            }
            set
            {
                global::LightSwitchApplication.Остатки.DetailsClass.SetValue(this, global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity1, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Quantity1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.Остатки.DetailsClass.PropertySet, global::LightSwitchApplication.Остатки.DetailsClass.CommandSet, global::LightSwitchApplication.Остатки.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>.Entry
                __ОстаткиEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>.Entry(
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeSavingEvent,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeSavedEvent,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeClosingEvent,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeCreated,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeActivated,
                    global::LightSwitchApplication.Остатки.DetailsClass.__Остатки_InvokeSaveErrorEvent);
            private static void __Остатки_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Остатки s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Остатки_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Остатки_InvokeSavingEvent(global::LightSwitchApplication.Остатки s)
            {
                bool handled = false;
                s.Остатки_Saving(ref handled);
                return handled;
            }
            private static void __Остатки_InvokeSavedEvent(global::LightSwitchApplication.Остатки s)
            {
                s.Остатки_Saved();
            }
            private static bool __Остатки_InvokeClosingEvent(global::LightSwitchApplication.Остатки s)
            {
                bool cancel = false;
                s.Остатки_Closing(ref cancel);
                return cancel;
            }
            private static void __Остатки_InvokeCreated(global::LightSwitchApplication.Остатки s)
            {
                s.Остатки_Created();
            }
            private static void __Остатки_InvokeActivated(global::LightSwitchApplication.Остатки s)
            {
                s.Остатки_Activated();
            }
            private static bool __Остатки_InvokeSaveErrorEvent(global::LightSwitchApplication.Остатки s, global::System.Exception ex)
            {
                bool handled = false;
                s.Остатки_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Остатки.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Остатки.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Остатки.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery(string NameSklad, string NameMAG, global::System.Nullable<decimal> Quantity, global::System.Nullable<decimal> Quantity1)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.MatsAndGoodsQuantities,
                            (m) => (((((m.SkladiItem.Status.CompareTo("Функционирует") == 0) && ((NameMAG == null) || (m.MatsAndGoodsItem.Name.CompareTo(NameMAG) == 0))) && ((NameSklad == null) || (m.SkladiItem.Name.CompareTo(NameSklad) == 0))) && ((Quantity.HasValue == false) || (m.Quantity.HasValue && (Quantity.HasValue && (m.Quantity > Quantity))))) && ((Quantity1.HasValue == false) || (m.Quantity.HasValue && (Quantity1.HasValue && (m.Quantity < Quantity1)))))),
                        "SkladiItem"),
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data _NameSklad;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data _NameMAG;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Data _Quantity;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Data _Quantity1;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Name);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string> NameSklad
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameSklad);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string> NameMAG
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.NameMAG);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>> Quantity
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>> Quantity1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties.Quantity1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.Остатки.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery((string)args[0], (string)args[1], (global::System.Nullable<decimal>)args[2], (global::System.Nullable<decimal>)args[3]);
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.Остатки s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.Остатки s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.Name_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry
                    NameSklad = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry(
                        "NameSklad",
                        false,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameSklad_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameSklad_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameSklad_OnValueChanged);
                private static void _NameSklad_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._NameSklad, sf);
                }
                private static void _NameSklad_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NameSklad_Validate(r);
                }
                private static void _NameSklad_OnValueChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.NameSklad_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry
                    NameMAG = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Entry(
                        "NameMAG",
                        false,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameMAG_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameMAG_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._NameMAG_OnValueChanged);
                private static void _NameMAG_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, string>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._NameMAG, sf);
                }
                private static void _NameMAG_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NameMAG_Validate(r);
                }
                private static void _NameMAG_OnValueChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.NameMAG_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Entry
                    Quantity = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "Quantity",
                        false,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity_OnValueChanged);
                private static void _Quantity_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._Quantity, sf);
                }
                private static void _Quantity_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Quantity_Validate(r);
                }
                private static void _Quantity_OnValueChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.Quantity_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Entry
                    Quantity1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "Quantity1",
                        false,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity1_Stub,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity1_Validate,
                        global::LightSwitchApplication.Остатки.DetailsClass.PropertySetProperties._Quantity1_OnValueChanged);
                private static void _Quantity1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Остатки.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Остатки, global::LightSwitchApplication.Остатки.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.Остатки.DetailsClass d, object sf)
                {
                    c(d, ref d._Quantity1, sf);
                }
                private static void _Quantity1_Validate(global::LightSwitchApplication.Остатки s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Quantity1_Validate(r);
                }
                private static void _Quantity1_OnValueChanged(global::LightSwitchApplication.Остатки s)
                {
                    s.Quantity1_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Ответственные
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Ответственные() : base("LightSwitchApplication.Sklad.DesktopClient:Ответственные")
        {
            global::LightSwitchApplication.Ответственные.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Ответственные CreateInstance()
        {
            return new global::LightSwitchApplication.Ответственные(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ответственные_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Responsible_SelectionChanged();

        partial void Responsible_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Responsible_Loaded(bool succeeded);

        /// <summary>
        /// Получает коллекцию визуальных элементов Responsible. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ResponsibleItem> Responsible
        {
            get
            {
                return global::LightSwitchApplication.Ответственные.DetailsClass.GetValue(this, global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties.Responsible);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Responsible_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.Ответственные.DetailsClass.PropertySet, global::LightSwitchApplication.Ответственные.DetailsClass.CommandSet, global::LightSwitchApplication.Ответственные.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties.Responsible;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>.Entry
                __ОтветственныеEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>.Entry(
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeSavingEvent,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeSavedEvent,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeClosingEvent,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeCreated,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeActivated,
                    global::LightSwitchApplication.Ответственные.DetailsClass.__Ответственные_InvokeSaveErrorEvent);
            private static void __Ответственные_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Ответственные s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Ответственные_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Ответственные_InvokeSavingEvent(global::LightSwitchApplication.Ответственные s)
            {
                bool handled = false;
                s.Ответственные_Saving(ref handled);
                return handled;
            }
            private static void __Ответственные_InvokeSavedEvent(global::LightSwitchApplication.Ответственные s)
            {
                s.Ответственные_Saved();
            }
            private static bool __Ответственные_InvokeClosingEvent(global::LightSwitchApplication.Ответственные s)
            {
                bool cancel = false;
                s.Ответственные_Closing(ref cancel);
                return cancel;
            }
            private static void __Ответственные_InvokeCreated(global::LightSwitchApplication.Ответственные s)
            {
                s.Ответственные_Created();
            }
            private static void __Ответственные_InvokeActivated(global::LightSwitchApplication.Ответственные s)
            {
                s.Ответственные_Activated();
            }
            private static bool __Ответственные_InvokeSaveErrorEvent(global::LightSwitchApplication.Ответственные s, global::System.Exception ex)
            {
                bool handled = false;
                s.Ответственные_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Ответственные.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Ответственные.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Ответственные.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ResponsibleQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    this.Screen.DataWorkspace.skladData.Responsible,
                    "SkladiItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem>.Data _Responsible;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem> Responsible
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem>)base.GetItem(global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties.Responsible);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem>.Entry
                    Responsible = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem>.Entry(
                        "Responsible",
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_Stub,
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_Validate,
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_CreateQuery,
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_SelectionChanged,
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_OnCollectionChanged,
                        global::LightSwitchApplication.Ответственные.DetailsClass.PropertySetProperties._Responsible_OnLoaded);
                private static void _Responsible_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Ответственные.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Ответственные, global::LightSwitchApplication.Ответственные.DetailsClass, global::LightSwitchApplication.ResponsibleItem>.Data> c, global::LightSwitchApplication.Ответственные.DetailsClass d, object sf)
                {
                    c(d, ref d._Responsible, sf);
                }
                private static void _Responsible_Validate(global::LightSwitchApplication.Ответственные s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Responsible_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Responsible_CreateQuery(global::LightSwitchApplication.Ответственные.DetailsClass d, object[] args)
                {
                    return d.ResponsibleQuery();
                }
                private static void _Responsible_SelectionChanged(global::LightSwitchApplication.Ответственные s)
                {
                    s.Responsible_SelectionChanged();
                }
                private static void _Responsible_OnCollectionChanged(global::LightSwitchApplication.Ответственные s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Responsible_Changed(e);
                }
                private static void _Responsible_OnLoaded(global::LightSwitchApplication.Ответственные s, bool succeeded)
                {
                    s.Responsible_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ОтчетЛогДвижение
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ОтчетЛогДвижение() : base("LightSwitchApplication.Sklad.DesktopClient:ОтчетЛогДвижение")
        {
            global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ОтчетЛогДвижение CreateInstance()
        {
            return new global::LightSwitchApplication.ОтчетЛогДвижение(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогДвижение_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void LogActionsAndCraft_SelectionChanged();

        partial void LogActionsAndCraft_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LogActionsAndCraft_Loaded(bool succeeded);

        partial void c_DateMore_Changed();

        partial void c_DateLess_Changed();

        partial void MatsAndGoodsItem_Changed();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsItem_Loaded(bool succeeded);

        partial void ID_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов LogActionsAndCraft. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.LogActionsAndCraftItem> LogActionsAndCraft
        {
            get
            {
                return global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.LogActionsAndCraft);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LogActionsAndCraft_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime c_DateMore
        {
            get 
            {
                return global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateMore);
            }
            set
            {
                global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.SetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void c_DateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime c_DateLess
        {
            get 
            {
                return global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateLess);
            }
            set
            {
                global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.SetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void c_DateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.MatsAndGoodsItem MatsAndGoodsItem
        {
            get
            {
                return global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.MatsAndGoodsItem);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsItem_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.MatsAndGoodsItem ID
        {
            get 
            {
                return global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.ID);
            }
            set
            {
                global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.SetValue(this, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.ID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySet, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.CommandSet, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.LogActionsAndCraft;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>.Entry
                __ОтчетЛогДвижениеEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>.Entry(
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeSavingEvent,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeSavedEvent,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeClosingEvent,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeCreated,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeActivated,
                    global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.__ОтчетЛогДвижение_InvokeSaveErrorEvent);
            private static void __ОтчетЛогДвижение_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ОтчетЛогДвижение s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ОтчетЛогДвижение_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ОтчетЛогДвижение_InvokeSavingEvent(global::LightSwitchApplication.ОтчетЛогДвижение s)
            {
                bool handled = false;
                s.ОтчетЛогДвижение_Saving(ref handled);
                return handled;
            }
            private static void __ОтчетЛогДвижение_InvokeSavedEvent(global::LightSwitchApplication.ОтчетЛогДвижение s)
            {
                s.ОтчетЛогДвижение_Saved();
            }
            private static bool __ОтчетЛогДвижение_InvokeClosingEvent(global::LightSwitchApplication.ОтчетЛогДвижение s)
            {
                bool cancel = false;
                s.ОтчетЛогДвижение_Closing(ref cancel);
                return cancel;
            }
            private static void __ОтчетЛогДвижение_InvokeCreated(global::LightSwitchApplication.ОтчетЛогДвижение s)
            {
                s.ОтчетЛогДвижение_Created();
            }
            private static void __ОтчетЛогДвижение_InvokeActivated(global::LightSwitchApplication.ОтчетЛогДвижение s)
            {
                s.ОтчетЛогДвижение_Activated();
            }
            private static bool __ОтчетЛогДвижение_InvokeSaveErrorEvent(global::LightSwitchApplication.ОтчетЛогДвижение s, global::System.Exception ex)
            {
                bool handled = false;
                s.ОтчетЛогДвижение_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable LogActionsAndCraftQuery(global::System.Nullable<global::System.DateTime> c_DateMore, global::System.Nullable<global::System.DateTime> c_DateLess, global::System.Nullable<decimal> ID)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.LogActionsAndCraft,
                            (l) => (((l.c_Date.HasValue && (c_DateMore.HasValue && (l.c_Date >= c_DateMore))) && (l.c_Date.HasValue && (c_DateLess.HasValue && (l.c_Date <= c_DateLess)))) && (ID.HasValue && (l.MatsAndGoodsItem1.ID == ID)))),
                        "MatsAndGoodsItem1"),
                    "SkladiItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem>.Data _LogActionsAndCraft;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Data _c_DateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Data _c_DateLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoodsItem;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _ID;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem> LogActionsAndCraft
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem>)base.GetItem(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.LogActionsAndCraft);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime> c_DateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>)base.GetItem(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime> c_DateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>)base.GetItem(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.c_DateLess);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoodsItem
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.MatsAndGoodsItem);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> ID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties.ID);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem>.Entry
                    LogActionsAndCraft = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem>.Entry(
                        "LogActionsAndCraft",
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_Stub,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_Validate,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_CreateQuery,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_SelectionChanged,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_OnCollectionChanged,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._LogActionsAndCraft_OnLoaded);
                private static void _LogActionsAndCraft_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.LogActionsAndCraftItem>.Data> c, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object sf)
                {
                    c(d, ref d._LogActionsAndCraft, sf);
                }
                private static void _LogActionsAndCraft_Validate(global::LightSwitchApplication.ОтчетЛогДвижение s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.LogActionsAndCraft_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _LogActionsAndCraft_CreateQuery(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object[] args)
                {
                    return d.LogActionsAndCraftQuery((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (global::System.Nullable<decimal>)args[2]);
                }
                private static void _LogActionsAndCraft_SelectionChanged(global::LightSwitchApplication.ОтчетЛогДвижение s)
                {
                    s.LogActionsAndCraft_SelectionChanged();
                }
                private static void _LogActionsAndCraft_OnCollectionChanged(global::LightSwitchApplication.ОтчетЛогДвижение s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.LogActionsAndCraft_Changed(e);
                }
                private static void _LogActionsAndCraft_OnLoaded(global::LightSwitchApplication.ОтчетЛогДвижение s, bool succeeded)
                {
                    s.LogActionsAndCraft_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Entry
                    c_DateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Entry(
                        "c_DateMore",
                        false,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateMore_Stub,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateMore_Validate,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateMore_OnValueChanged);
                private static void _c_DateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object sf)
                {
                    c(d, ref d._c_DateMore, sf);
                }
                private static void _c_DateMore_Validate(global::LightSwitchApplication.ОтчетЛогДвижение s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.c_DateMore_Validate(r);
                }
                private static void _c_DateMore_OnValueChanged(global::LightSwitchApplication.ОтчетЛогДвижение s)
                {
                    s.c_DateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Entry
                    c_DateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Entry(
                        "c_DateLess",
                        false,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateLess_Stub,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateLess_Validate,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._c_DateLess_OnValueChanged);
                private static void _c_DateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object sf)
                {
                    c(d, ref d._c_DateLess, sf);
                }
                private static void _c_DateLess_Validate(global::LightSwitchApplication.ОтчетЛогДвижение s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.c_DateLess_Validate(r);
                }
                private static void _c_DateLess_OnValueChanged(global::LightSwitchApplication.ОтчетЛогДвижение s)
                {
                    s.c_DateLess_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoodsItem = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoodsItem",
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._MatsAndGoodsItem_Stub,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._MatsAndGoodsItem_Validate,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._MatsAndGoodsItem_CreateQuery,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._MatsAndGoodsItem_OnValueChanged,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._MatsAndGoodsItem_OnLoaded);
                private static void _MatsAndGoodsItem_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsItem, sf);
                }
                private static void _MatsAndGoodsItem_Validate(global::LightSwitchApplication.ОтчетЛогДвижение s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsItem_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsItem_CreateQuery(global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object[] args)
                {
                    return null;
                }
                private static void _MatsAndGoodsItem_OnValueChanged(global::LightSwitchApplication.ОтчетЛогДвижение s)
                {
                    s.MatsAndGoodsItem_Changed();
                }

                private static void _MatsAndGoodsItem_OnLoaded(global::LightSwitchApplication.ОтчетЛогДвижение s, bool succeeded)
                {
                    s.MatsAndGoodsItem_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    ID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "ID",
                        false,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._ID_Stub,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._ID_Validate,
                        global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass.PropertySetProperties._ID_OnValueChanged);
                private static void _ID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогДвижение, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ОтчетЛогДвижение.DetailsClass d, object sf)
                {
                    c(d, ref d._ID, sf);
                }
                private static void _ID_Validate(global::LightSwitchApplication.ОтчетЛогДвижение s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ID_Validate(r);
                }
                private static void _ID_OnValueChanged(global::LightSwitchApplication.ОтчетЛогДвижение s)
                {
                    s.ID_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ОтчетЛогКоличества
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ОтчетЛогКоличества() : base("LightSwitchApplication.Sklad.DesktopClient:ОтчетЛогКоличества")
        {
            global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ОтчетЛогКоличества CreateInstance()
        {
            return new global::LightSwitchApplication.ОтчетЛогКоличества(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ОтчетЛогКоличества_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void LogMatsAndGoodsQuantities_SelectionChanged();

        partial void LogMatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LogMatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void c_DateMore_Changed();

        partial void c_DateLess_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов LogMatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem> LogMatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.LogMatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LogMatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime c_DateMore
        {
            get 
            {
                return global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateMore);
            }
            set
            {
                global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.SetValue(this, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void c_DateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime c_DateLess
        {
            get 
            {
                return global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.GetValue(this, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateLess);
            }
            set
            {
                global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.SetValue(this, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void c_DateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySet, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.CommandSet, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.LogMatsAndGoodsQuantities;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>.Entry
                __ОтчетЛогКоличестваEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>.Entry(
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeSavingEvent,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeSavedEvent,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeClosingEvent,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeCreated,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeActivated,
                    global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.__ОтчетЛогКоличества_InvokeSaveErrorEvent);
            private static void __ОтчетЛогКоличества_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ОтчетЛогКоличества s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ОтчетЛогКоличества_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ОтчетЛогКоличества_InvokeSavingEvent(global::LightSwitchApplication.ОтчетЛогКоличества s)
            {
                bool handled = false;
                s.ОтчетЛогКоличества_Saving(ref handled);
                return handled;
            }
            private static void __ОтчетЛогКоличества_InvokeSavedEvent(global::LightSwitchApplication.ОтчетЛогКоличества s)
            {
                s.ОтчетЛогКоличества_Saved();
            }
            private static bool __ОтчетЛогКоличества_InvokeClosingEvent(global::LightSwitchApplication.ОтчетЛогКоличества s)
            {
                bool cancel = false;
                s.ОтчетЛогКоличества_Closing(ref cancel);
                return cancel;
            }
            private static void __ОтчетЛогКоличества_InvokeCreated(global::LightSwitchApplication.ОтчетЛогКоличества s)
            {
                s.ОтчетЛогКоличества_Created();
            }
            private static void __ОтчетЛогКоличества_InvokeActivated(global::LightSwitchApplication.ОтчетЛогКоличества s)
            {
                s.ОтчетЛогКоличества_Activated();
            }
            private static bool __ОтчетЛогКоличества_InvokeSaveErrorEvent(global::LightSwitchApplication.ОтчетЛогКоличества s, global::System.Exception ex)
            {
                bool handled = false;
                s.ОтчетЛогКоличества_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable LogMatsAndGoodsQuantitiesQuery(global::System.Nullable<global::System.DateTime> c_DateMore, global::System.Nullable<global::System.DateTime> c_DateLess)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.LogMatsAndGoodsQuantities,
                            (l) => (((l.c_Date.HasValue && (c_DateMore.HasValue && (l.c_Date >= c_DateMore))) && (l.c_Date.HasValue && (c_DateLess.HasValue && (l.c_Date <= c_DateLess)))) && (l.SkladiItem.Status.CompareTo("Функционирует") == 0))),
                        "MatsAndGoodsItem"),
                    "SkladiItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem>.Data _LogMatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Data _c_DateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Data _c_DateLess;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem> LogMatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.LogMatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime> c_DateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>)base.GetItem(global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime> c_DateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>)base.GetItem(global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties.c_DateLess);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem>.Entry
                    LogMatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem>.Entry(
                        "LogMatsAndGoodsQuantities",
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._LogMatsAndGoodsQuantities_OnLoaded);
                private static void _LogMatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::LightSwitchApplication.LogMatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass d, object sf)
                {
                    c(d, ref d._LogMatsAndGoodsQuantities, sf);
                }
                private static void _LogMatsAndGoodsQuantities_Validate(global::LightSwitchApplication.ОтчетЛогКоличества s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.LogMatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _LogMatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass d, object[] args)
                {
                    return d.LogMatsAndGoodsQuantitiesQuery((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1]);
                }
                private static void _LogMatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.ОтчетЛогКоличества s)
                {
                    s.LogMatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _LogMatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.ОтчетЛогКоличества s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.LogMatsAndGoodsQuantities_Changed(e);
                }
                private static void _LogMatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.ОтчетЛогКоличества s, bool succeeded)
                {
                    s.LogMatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Entry
                    c_DateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Entry(
                        "c_DateMore",
                        false,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateMore_Stub,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateMore_Validate,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateMore_OnValueChanged);
                private static void _c_DateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass d, object sf)
                {
                    c(d, ref d._c_DateMore, sf);
                }
                private static void _c_DateMore_Validate(global::LightSwitchApplication.ОтчетЛогКоличества s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.c_DateMore_Validate(r);
                }
                private static void _c_DateMore_OnValueChanged(global::LightSwitchApplication.ОтчетЛогКоличества s)
                {
                    s.c_DateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Entry
                    c_DateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Entry(
                        "c_DateLess",
                        false,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateLess_Stub,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateLess_Validate,
                        global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass.PropertySetProperties._c_DateLess_OnValueChanged);
                private static void _c_DateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ОтчетЛогКоличества, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.ОтчетЛогКоличества.DetailsClass d, object sf)
                {
                    c(d, ref d._c_DateLess, sf);
                }
                private static void _c_DateLess_Validate(global::LightSwitchApplication.ОтчетЛогКоличества s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.c_DateLess_Validate(r);
                }
                private static void _c_DateLess_OnValueChanged(global::LightSwitchApplication.ОтчетЛогКоличества s)
                {
                    s.c_DateLess_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ПеремещениеОтправка
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ПеремещениеОтправка() : base("LightSwitchApplication.Sklad.DesktopClient:ПеремещениеОтправка")
        {
            global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ПеремещениеОтправка CreateInstance()
        {
            return new global::LightSwitchApplication.ПеремещениеОтправка(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеОтправка_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void Actions1_SelectionChanged();

        partial void Actions1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Loaded(bool succeeded);

        partial void ActionsFiller1_SelectionChanged();

        partial void ActionsFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Loaded(bool succeeded);

        partial void Skladi_SelectionChanged();

        partial void Skladi_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Loaded(bool succeeded);

        partial void NumberIn_Changed();

        partial void Status_Changed();

        partial void CreationDateMore_Changed();

        partial void SkladOutName_Changed();

        partial void SkladInName_Changed();

        partial void NumberDirect_Changed();

        partial void CreationDateLess_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions1
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Actions1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.ActionsFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Skladi. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> Skladi
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Skladi);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberIn
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberIn);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberIn, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberIn_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Status
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Status);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Status, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateMore
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateMore);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladOutName
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladOutName);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladOutName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladOutName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladInName
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladInName);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladInName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladInName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberDirect
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberDirect);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberDirect, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberDirect_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateLess
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateLess);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана ActionsItemListAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListAddAndEditNew()
        {
            this.Details.Methods.ActionsItemListAddAndEditNew.CreateInvocation().Execute();
        }
        partial void ActionsItemListAddAndEditNew_CanExecute(ref bool result);
        partial void ActionsItemListAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListEditSelected()
        {
            this.Details.Methods.ActionsItemListEditSelected.CreateInvocation().Execute();
        }
        partial void ActionsItemListEditSelected_CanExecute(ref bool result);
        partial void ActionsItemListEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана NewActionOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionOk()
        {
            this.Details.Methods.NewActionOk.CreateInvocation().Execute();
        }
        partial void NewActionOk_CanExecute(ref bool result);
        partial void NewActionOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewActionCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionCancel()
        {
            this.Details.Methods.NewActionCancel.CreateInvocation().Execute();
        }
        partial void NewActionCancel_CanExecute(ref bool result);
        partial void NewActionCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListDeleteSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListDeleteSelected()
        {
            this.Details.Methods.ActionsItemListDeleteSelected.CreateInvocation().Execute();
        }
        partial void ActionsItemListDeleteSelected_CanExecute(ref bool result);
        partial void ActionsItemListDeleteSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelApply()
        {
            this.Details.Methods.CancelApply.CreateInvocation().Execute();
        }
        partial void CancelApply_CanExecute(ref bool result);
        partial void CancelApply_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        /// <summary>
        /// Вызывает метод экрана AddAsWas.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAsWas()
        {
            this.Details.Methods.AddAsWas.CreateInvocation().Execute();
        }
        partial void AddAsWas_CanExecute(ref bool result);
        partial void AddAsWas_Execute();

        /// <summary>
        /// Вызывает метод экрана Excel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Excel()
        {
            this.Details.Methods.Excel.CreateInvocation().Execute();
        }
        partial void Excel_CanExecute(ref bool result);
        partial void Excel_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySet, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSet, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Actions;
                var initializeCommandEntry = global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.ActionsItemListAddAndEditNew;
                var initializeMethodEntry = global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.ActionsItemListAddAndEditNew;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                __ПеремещениеОтправкаEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeSavingEvent,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeSavedEvent,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeClosingEvent,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeCreated,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeActivated,
                    global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.__ПеремещениеОтправка_InvokeSaveErrorEvent);
            private static void __ПеремещениеОтправка_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ПеремещениеОтправка_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ПеремещениеОтправка_InvokeSavingEvent(global::LightSwitchApplication.ПеремещениеОтправка s)
            {
                bool handled = false;
                s.ПеремещениеОтправка_Saving(ref handled);
                return handled;
            }
            private static void __ПеремещениеОтправка_InvokeSavedEvent(global::LightSwitchApplication.ПеремещениеОтправка s)
            {
                s.ПеремещениеОтправка_Saved();
            }
            private static bool __ПеремещениеОтправка_InvokeClosingEvent(global::LightSwitchApplication.ПеремещениеОтправка s)
            {
                bool cancel = false;
                s.ПеремещениеОтправка_Closing(ref cancel);
                return cancel;
            }
            private static void __ПеремещениеОтправка_InvokeCreated(global::LightSwitchApplication.ПеремещениеОтправка s)
            {
                s.ПеремещениеОтправка_Created();
            }
            private static void __ПеремещениеОтправка_InvokeActivated(global::LightSwitchApplication.ПеремещениеОтправка s)
            {
                s.ПеремещениеОтправка_Activated();
            }
            private static bool __ПеремещениеОтправка_InvokeSaveErrorEvent(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Exception ex)
            {
                bool handled = false;
                s.ПеремещениеОтправка_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery(string NumberIn, string NumberDirect, string Status, global::System.Nullable<global::System.DateTime> CreationDateMore, global::System.Nullable<global::System.DateTime> CreationDateLess, string SkladOutName, string SkladInName)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Actions,
                            (a) => ((((((((((a.Status.CompareTo("Отправлен") == 0) || (a.Status.CompareTo("Завершен") == 0)) && (a.Action.CompareTo("Перемещение") == 0)) && ((NumberIn == null) || a.Number.Contains(NumberIn))) && ((NumberDirect == null) || (a.Number.CompareTo(NumberDirect) == 0))) && ((Status == null) || a.Status.Contains(Status))) && ((CreationDateMore.HasValue == false) || (CreationDateMore.HasValue && (a.CreationDate >= CreationDateMore)))) && ((CreationDateLess.HasValue == false) || (CreationDateLess.HasValue && (a.CreationDate <= CreationDateLess)))) && ((SkladOutName == null) || a.SkladiItem.Name.Contains(SkladOutName))) && ((SkladInName == null) || a.SkladiItem1.Name.Contains(SkladInName)))),
                        "SkladiItem"),
                    "SkladiItem1");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Actions1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Actions,
                            (a) => (a.ID == 0m)),
                        "SkladiItem"),
                    "SkladiItem1");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFiller1Query()
            {
                if (this.Screen.Actions1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions1.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        loader,
                        (a) => (a.ID == 0m)),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Skladi,
                    (s) => (s.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _Skladi;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data _NumberIn;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data _Status;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data _SkladOutName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data _SkladInName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data _NumberDirect;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _NewActionOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _NewActionCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListDeleteSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _CancelApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _AddAsWasCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ExcelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _NewActionOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _NewActionCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ActionsItemListDeleteSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _CancelApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _SearchCloseMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _AddAsWasMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data _ExcelMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Actions1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.ActionsFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem> Skladi
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Skladi);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string> NumberIn
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberIn);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string> Status
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.Status);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string> SkladOutName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladOutName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string> SkladInName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.SkladInName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string> NumberDirect
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.NumberDirect);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties.CreationDateLess);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.ActionsItemListDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.AddAsWas);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> Excel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties.Excel);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> ActionsItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.ActionsItemListDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.AddAsWas);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass> Excel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties.Excel);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery((string)args[0], (string)args[1], (string)args[2], (global::System.Nullable<global::System.DateTime>)args[3], (global::System.Nullable<global::System.DateTime>)args[4], (string)args[5], (string)args[6]);
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.ПеремещениеОтправка s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.ПеремещениеОтправка s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions1",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Actions1_OnLoaded);
                private static void _Actions1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions1, sf);
                }
                private static void _Actions1_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions1_CreateQuery(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object[] args)
                {
                    return d.Actions1Query();
                }
                private static void _Actions1_SelectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.Actions1_SelectionChanged();
                }
                private static void _Actions1_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions1_Changed(e);
                }
                private static void _Actions1_OnLoaded(global::LightSwitchApplication.ПеремещениеОтправка s, bool succeeded)
                {
                    s.Actions1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller1",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._ActionsFiller1_OnLoaded);
                private static void _ActionsFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller1, sf);
                }
                private static void _ActionsFiller1_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller1_CreateQuery(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object[] args)
                {
                    return d.ActionsFiller1Query();
                }
                private static void _ActionsFiller1_SelectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.ActionsFiller1_SelectionChanged();
                }
                private static void _ActionsFiller1_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller1_Changed(e);
                }
                private static void _ActionsFiller1_OnLoaded(global::LightSwitchApplication.ПеремещениеОтправка s, bool succeeded)
                {
                    s.ActionsFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    Skladi = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "Skladi",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Skladi_OnLoaded);
                private static void _Skladi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Skladi, sf);
                }
                private static void _Skladi_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Skladi_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Skladi_CreateQuery(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object[] args)
                {
                    return d.SkladiQuery();
                }
                private static void _Skladi_SelectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.Skladi_SelectionChanged();
                }
                private static void _Skladi_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеОтправка s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Skladi_Changed(e);
                }
                private static void _Skladi_OnLoaded(global::LightSwitchApplication.ПеремещениеОтправка s, bool succeeded)
                {
                    s.Skladi_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry
                    NumberIn = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry(
                        "NumberIn",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberIn_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberIn_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberIn_OnValueChanged);
                private static void _NumberIn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberIn, sf);
                }
                private static void _NumberIn_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberIn_Validate(r);
                }
                private static void _NumberIn_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.NumberIn_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry
                    Status = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry(
                        "Status",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Status_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Status_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._Status_OnValueChanged);
                private static void _Status_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._Status, sf);
                }
                private static void _Status_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Status_Validate(r);
                }
                private static void _Status_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.Status_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateMore",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateMore_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateMore_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateMore_OnValueChanged);
                private static void _CreationDateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateMore, sf);
                }
                private static void _CreationDateMore_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateMore_Validate(r);
                }
                private static void _CreationDateMore_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.CreationDateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry
                    SkladOutName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry(
                        "SkladOutName",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladOutName_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladOutName_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladOutName_OnValueChanged);
                private static void _SkladOutName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladOutName, sf);
                }
                private static void _SkladOutName_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladOutName_Validate(r);
                }
                private static void _SkladOutName_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.SkladOutName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry
                    SkladInName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry(
                        "SkladInName",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladInName_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladInName_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._SkladInName_OnValueChanged);
                private static void _SkladInName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladInName, sf);
                }
                private static void _SkladInName_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladInName_Validate(r);
                }
                private static void _SkladInName_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.SkladInName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry
                    NumberDirect = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Entry(
                        "NumberDirect",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberDirect_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberDirect_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._NumberDirect_OnValueChanged);
                private static void _NumberDirect_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberDirect, sf);
                }
                private static void _NumberDirect_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberDirect_Validate(r);
                }
                private static void _NumberDirect_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.NumberDirect_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateLess",
                        false,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateLess_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateLess_Validate,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.PropertySetProperties._CreationDateLess_OnValueChanged);
                private static void _CreationDateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateLess, sf);
                }
                private static void _CreationDateLess_Validate(global::LightSwitchApplication.ПеремещениеОтправка s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateLess_Validate(r);
                }
                private static void _CreationDateLess_OnValueChanged(global::LightSwitchApplication.ПеремещениеОтправка s)
                {
                    s.CreationDateLess_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_CreateExecutableObject);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.ActionsItemListAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_CreateExecutableObject);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListEditSelected_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.ActionsItemListEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._NewActionOk_CreateExecutableObject);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionOk_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.NewActionOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._NewActionCancel_CreateExecutableObject);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionCancel_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.NewActionCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListDeleteSelected",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._ActionsItemListDeleteSelected_CreateExecutableObject);
                private static void _ActionsItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListDeleteSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListDeleteSelected_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.ActionsItemListDeleteSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._CancelApply_CreateExecutableObject);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelApply_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.CancelApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._AddAsWas_CreateExecutableObject);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddAsWas_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.AddAsWas.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    Excel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "Excel",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._Excel_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.CommandSetProperties._Excel_CreateExecutableObject);
                private static void _Excel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ExcelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Excel_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass)d).Methods.Excel.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_InvokeMethod);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _ActionsItemListAddAndEditNew_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListAddAndEditNew_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_InvokeMethod);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedMethod, sf);
                }
                private static global::System.Exception _ActionsItemListEditSelected_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListEditSelected_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionOk_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionOk_InvokeMethod);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkMethod, sf);
                }
                private static global::System.Exception _NewActionOk_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionOk_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionCancel_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._NewActionCancel_InvokeMethod);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelMethod, sf);
                }
                private static global::System.Exception _NewActionCancel_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionCancel_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    ActionsItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "ActionsItemListDeleteSelected",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListDeleteSelected_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._ActionsItemListDeleteSelected_InvokeMethod);
                private static void _ActionsItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListDeleteSelectedMethod, sf);
                }
                private static global::System.Exception _ActionsItemListDeleteSelected_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListDeleteSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListDeleteSelected_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListDeleteSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._CancelApply_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._CancelApply_InvokeMethod);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyMethod, sf);
                }
                private static global::System.Exception _CancelApply_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelApply_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._AddAsWas_InvokeMethod);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasMethod, sf);
                }
                private static global::System.Exception _AddAsWas_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddAsWas_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddAsWas_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddAsWas_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry
                    Excel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Entry(
                        "Excel",
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._Excel_Stub,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._Excel_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass.MethodSetProperties._Excel_InvokeMethod);
                private static void _Excel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеОтправка, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, object sf)
                {
                    c(d, ref d._ExcelMethod, sf);
                }
                private static global::System.Exception _Excel_CanInvoke(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Excel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Excel_InvokeMethod(global::LightSwitchApplication.ПеремещениеОтправка.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Excel_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ПеремещениеПриход2
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ПеремещениеПриход2() : base("LightSwitchApplication.Sklad.DesktopClient:ПеремещениеПриход2")
        {
            global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ПеремещениеПриход2 CreateInstance()
        {
            return new global::LightSwitchApplication.ПеремещениеПриход2(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПеремещениеПриход2_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void NumberIn_Changed();

        partial void NumberDirect_Changed();

        partial void Status_Changed();

        partial void CreationDateMore_Changed();

        partial void CreationDateLess_Changed();

        partial void SkladNameOut_Changed();

        partial void SkladNameIn_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberIn
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberIn);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberIn, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberIn_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberDirect
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberDirect);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberDirect, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberDirect_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Status
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Status);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Status, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Status_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateMore
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateMore);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateLess
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateLess);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladNameOut
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameOut);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameOut, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladNameOut_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladNameIn
        {
            get 
            {
                return global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.GetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameIn);
            }
            set
            {
                global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.SetValue(this, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameIn, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladNameIn_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана FinishMove.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void FinishMove()
        {
            this.Details.Methods.FinishMove.CreateInvocation().Execute();
        }
        partial void FinishMove_CanExecute(ref bool result);
        partial void FinishMove_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelApply()
        {
            this.Details.Methods.CancelApply.CreateInvocation().Execute();
        }
        partial void CancelApply_CanExecute(ref bool result);
        partial void CancelApply_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySet, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSet, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Actions;
                var initializeCommandEntry = global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.FinishMove;
                var initializeMethodEntry = global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.FinishMove;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                __ПеремещениеПриход2Entry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeSavingEvent,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeSavedEvent,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeClosingEvent,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeCreated,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeActivated,
                    global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.__ПеремещениеПриход2_InvokeSaveErrorEvent);
            private static void __ПеремещениеПриход2_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ПеремещениеПриход2 s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ПеремещениеПриход2_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ПеремещениеПриход2_InvokeSavingEvent(global::LightSwitchApplication.ПеремещениеПриход2 s)
            {
                bool handled = false;
                s.ПеремещениеПриход2_Saving(ref handled);
                return handled;
            }
            private static void __ПеремещениеПриход2_InvokeSavedEvent(global::LightSwitchApplication.ПеремещениеПриход2 s)
            {
                s.ПеремещениеПриход2_Saved();
            }
            private static bool __ПеремещениеПриход2_InvokeClosingEvent(global::LightSwitchApplication.ПеремещениеПриход2 s)
            {
                bool cancel = false;
                s.ПеремещениеПриход2_Closing(ref cancel);
                return cancel;
            }
            private static void __ПеремещениеПриход2_InvokeCreated(global::LightSwitchApplication.ПеремещениеПриход2 s)
            {
                s.ПеремещениеПриход2_Created();
            }
            private static void __ПеремещениеПриход2_InvokeActivated(global::LightSwitchApplication.ПеремещениеПриход2 s)
            {
                s.ПеремещениеПриход2_Activated();
            }
            private static bool __ПеремещениеПриход2_InvokeSaveErrorEvent(global::LightSwitchApplication.ПеремещениеПриход2 s, global::System.Exception ex)
            {
                bool handled = false;
                s.ПеремещениеПриход2_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery(string NumberIn, string NumberDirect, string Status, global::System.Nullable<global::System.DateTime> CreationDateMore, global::System.Nullable<global::System.DateTime> CreationDateLess, string SkladNameOut, string SkladNameIn)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Actions,
                            (a) => ((((((((((a.Status.CompareTo("Отправлен") == 0) || (a.Status.CompareTo("Завершен") == 0)) && (a.Action.CompareTo("Перемещение") == 0)) && ((NumberIn == null) || a.Number.Contains(NumberIn))) && ((NumberDirect == null) || (a.Number.CompareTo(NumberDirect) == 0))) && ((Status == null) || a.Status.Contains(Status))) && ((CreationDateMore.HasValue == false) || (CreationDateMore.HasValue && (a.CreationDate >= CreationDateMore)))) && ((CreationDateLess.HasValue == false) || (CreationDateLess.HasValue && (a.CreationDate <= CreationDateLess)))) && ((SkladNameOut == null) || a.SkladiItem.Name.Contains(SkladNameOut))) && ((SkladNameIn == null) || a.SkladiItem1.Name.Contains(SkladNameIn)))),
                        "SkladiItem"),
                    "SkladiItem1");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data _NumberIn;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data _NumberDirect;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data _Status;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data _SkladNameOut;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data _SkladNameIn;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _FinishMoveCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _CancelApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _FinishMoveMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _CancelApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _SearchCloseMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string> NumberIn
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberIn);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string> NumberDirect
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.NumberDirect);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string> Status
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.Status);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.CreationDateLess);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string> SkladNameOut
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameOut);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string> SkladNameIn
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties.SkladNameIn);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> FinishMove
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.FinishMove);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> FinishMove
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.FinishMove);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery((string)args[0], (string)args[1], (string)args[2], (global::System.Nullable<global::System.DateTime>)args[3], (global::System.Nullable<global::System.DateTime>)args[4], (string)args[5], (string)args[6]);
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеПриход2 s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.ПеремещениеПриход2 s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.ПеремещениеПриход2 s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.ПеремещениеПриход2 s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry
                    NumberIn = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry(
                        "NumberIn",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberIn_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberIn_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberIn_OnValueChanged);
                private static void _NumberIn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberIn, sf);
                }
                private static void _NumberIn_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberIn_Validate(r);
                }
                private static void _NumberIn_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.NumberIn_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry
                    NumberDirect = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry(
                        "NumberDirect",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberDirect_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberDirect_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._NumberDirect_OnValueChanged);
                private static void _NumberDirect_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberDirect, sf);
                }
                private static void _NumberDirect_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberDirect_Validate(r);
                }
                private static void _NumberDirect_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.NumberDirect_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry
                    Status = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry(
                        "Status",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Status_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Status_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._Status_OnValueChanged);
                private static void _Status_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._Status, sf);
                }
                private static void _Status_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Status_Validate(r);
                }
                private static void _Status_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.Status_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateMore",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateMore_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateMore_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateMore_OnValueChanged);
                private static void _CreationDateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateMore, sf);
                }
                private static void _CreationDateMore_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateMore_Validate(r);
                }
                private static void _CreationDateMore_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.CreationDateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateLess",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateLess_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateLess_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._CreationDateLess_OnValueChanged);
                private static void _CreationDateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateLess, sf);
                }
                private static void _CreationDateLess_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateLess_Validate(r);
                }
                private static void _CreationDateLess_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.CreationDateLess_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry
                    SkladNameOut = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry(
                        "SkladNameOut",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameOut_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameOut_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameOut_OnValueChanged);
                private static void _SkladNameOut_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladNameOut, sf);
                }
                private static void _SkladNameOut_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladNameOut_Validate(r);
                }
                private static void _SkladNameOut_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.SkladNameOut_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry
                    SkladNameIn = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Entry(
                        "SkladNameIn",
                        false,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameIn_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameIn_Validate,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.PropertySetProperties._SkladNameIn_OnValueChanged);
                private static void _SkladNameIn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladNameIn, sf);
                }
                private static void _SkladNameIn_Validate(global::LightSwitchApplication.ПеремещениеПриход2 s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladNameIn_Validate(r);
                }
                private static void _SkladNameIn_OnValueChanged(global::LightSwitchApplication.ПеремещениеПриход2 s)
                {
                    s.SkladNameIn_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    FinishMove = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "FinishMove",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._FinishMove_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._FinishMove_CreateExecutableObject);
                private static void _FinishMove_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._FinishMoveCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _FinishMove_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass)d).Methods.FinishMove.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._CancelApply_CreateExecutableObject);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelApply_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass)d).Methods.CancelApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    FinishMove = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "FinishMove",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._FinishMove_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._FinishMove_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._FinishMove_InvokeMethod);
                private static void _FinishMove_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._FinishMoveMethod, sf);
                }
                private static global::System.Exception _FinishMove_CanInvoke(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.FinishMove_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _FinishMove_InvokeMethod(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.FinishMove_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._CancelApply_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._CancelApply_InvokeMethod);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyMethod, sf);
                }
                private static global::System.Exception _CancelApply_CanInvoke(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelApply_InvokeMethod(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПеремещениеПриход2, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass>.Data> c, global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.ПеремещениеПриход2.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ПланированиеЗакупок
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ПланированиеЗакупок() : base("LightSwitchApplication.Sklad.DesktopClient:ПланированиеЗакупок")
        {
            global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ПланированиеЗакупок CreateInstance()
        {
            return new global::LightSwitchApplication.ПланированиеЗакупок(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПланированиеЗакупок_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void MatsAndGoods_SelectionChanged();

        partial void MatsAndGoods_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Loaded(bool succeeded);

        partial void Recipes_SelectionChanged();

        partial void Recipes_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Loaded(bool succeeded);

        partial void RecipesComponents_SelectionChanged();

        partial void RecipesComponents_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void IDForTotalNum_Changed();

        partial void MatsAndGoods1_SelectionChanged();

        partial void MatsAndGoods1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Loaded(bool succeeded);

        partial void IDRecipe_Changed();

        partial void MatsAndGoods2_SelectionChanged();

        partial void MatsAndGoods2_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods2_Loaded(bool succeeded);

        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void Actions1_SelectionChanged();

        partial void Actions1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Loaded(bool succeeded);

        partial void ActionsFiller1_SelectionChanged();

        partial void ActionsFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Loaded(bool succeeded);

        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Recipes. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesItem> Recipes
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Recipes);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.RecipesComponents);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> IDForTotalNum
        {
            get 
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDForTotalNum);
            }
            set
            {
                global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.SetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDForTotalNum, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IDForTotalNum_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> IDRecipe
        {
            get 
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDRecipe);
            }
            set
            {
                global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.SetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDRecipe, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IDRecipe_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoods2. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods2
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods2);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoods2_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions1
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Actions1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
        {
            get
            {
                return global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.GetValue(this, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.ActionsFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана Calculate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Calculate()
        {
            this.Details.Methods.Calculate.CreateInvocation().Execute();
        }
        partial void Calculate_CanExecute(ref bool result);
        partial void Calculate_Execute();

        /// <summary>
        /// Вызывает метод экрана Clear.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Clear()
        {
            this.Details.Methods.Clear.CreateInvocation().Execute();
        }
        partial void Clear_CanExecute(ref bool result);
        partial void Clear_Execute();

        /// <summary>
        /// Вызывает метод экрана HideZero.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void HideZero()
        {
            this.Details.Methods.HideZero.CreateInvocation().Execute();
        }
        partial void HideZero_CanExecute(ref bool result);
        partial void HideZero_Execute();

        /// <summary>
        /// Вызывает метод экрана CloseWaybill.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CloseWaybill()
        {
            this.Details.Methods.CloseWaybill.CreateInvocation().Execute();
        }
        partial void CloseWaybill_CanExecute(ref bool result);
        partial void CloseWaybill_Execute();

        /// <summary>
        /// Вызывает метод экрана ExportDataGrid.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ExportDataGrid()
        {
            this.Details.Methods.ExportDataGrid.CreateInvocation().Execute();
        }
        partial void ExportDataGrid_CanExecute(ref bool result);
        partial void ExportDataGrid_Execute();

        /// <summary>
        /// Вызывает метод экрана QuantsCompute.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void QuantsCompute()
        {
            this.Details.Methods.QuantsCompute.CreateInvocation().Execute();
        }
        partial void QuantsCompute_CanExecute(ref bool result);
        partial void QuantsCompute_Execute();

        /// <summary>
        /// Вызывает метод экрана CloseQuants.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CloseQuants()
        {
            this.Details.Methods.CloseQuants.CreateInvocation().Execute();
        }
        partial void CloseQuants_CanExecute(ref bool result);
        partial void CloseQuants_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySet, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSet, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods;
                var initializeCommandEntry = global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.Calculate;
                var initializeMethodEntry = global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.Calculate;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                __ПланированиеЗакупокEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeSavingEvent,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeSavedEvent,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeClosingEvent,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeCreated,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeActivated,
                    global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.__ПланированиеЗакупок_InvokeSaveErrorEvent);
            private static void __ПланированиеЗакупок_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ПланированиеЗакупок_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ПланированиеЗакупок_InvokeSavingEvent(global::LightSwitchApplication.ПланированиеЗакупок s)
            {
                bool handled = false;
                s.ПланированиеЗакупок_Saving(ref handled);
                return handled;
            }
            private static void __ПланированиеЗакупок_InvokeSavedEvent(global::LightSwitchApplication.ПланированиеЗакупок s)
            {
                s.ПланированиеЗакупок_Saved();
            }
            private static bool __ПланированиеЗакупок_InvokeClosingEvent(global::LightSwitchApplication.ПланированиеЗакупок s)
            {
                bool cancel = false;
                s.ПланированиеЗакупок_Closing(ref cancel);
                return cancel;
            }
            private static void __ПланированиеЗакупок_InvokeCreated(global::LightSwitchApplication.ПланированиеЗакупок s)
            {
                s.ПланированиеЗакупок_Created();
            }
            private static void __ПланированиеЗакупок_InvokeActivated(global::LightSwitchApplication.ПланированиеЗакупок s)
            {
                s.ПланированиеЗакупок_Activated();
            }
            private static bool __ПланированиеЗакупок_InvokeSaveErrorEvent(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Exception ex)
            {
                bool handled = false;
                s.ПланированиеЗакупок_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.MatsAndGoods,
                    (m) => ((((m.Category.CompareTo("Материал") == 0) == false) && ((m.Category.CompareTo("Блок") == 0) == false)) || (m.Category.CompareTo("Готовое изделие") == 0)));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesQuery()
            {
                return this.Screen.DataWorkspace.skladData.Recipes;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponentsQuery(global::System.Nullable<decimal> IDRecipe)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.RecipesComponents,
                    (r) => ((IDRecipe.HasValue == false) || (IDRecipe.HasValue && (r.RecipesItem.ID == IDRecipe))));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery(global::System.Nullable<decimal> IDForTotalNum)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.MatsAndGoodsQuantities,
                    (m) => ((IDForTotalNum.HasValue == false) || (IDForTotalNum.HasValue && (m.MatsAndGoodsItem.ID == IDForTotalNum))));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoods1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.MatsAndGoods,
                    (m) => (m.Category.CompareTo("Материал") == 0));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoods2Query()
            {
                return this.Screen.DataWorkspace.skladData.MatsAndGoods;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery()
            {
                return this.Screen.DataWorkspace.skladData.Actions;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Actions1Query()
            {
                return this.Screen.DataWorkspace.skladData.Actions;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFiller1Query()
            {
                if (this.Screen.Actions1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions1.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data _Recipes;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Data _IDForTotalNum;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Data _IDRecipe;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data _MatsAndGoods2;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CalculateCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _ClearCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _HideZeroCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CloseWaybillCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _ExportDataGridCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _QuantsComputeCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CloseQuantsCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CalculateMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _ClearMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _HideZeroMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CloseWaybillMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _ExportDataGridMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _QuantsComputeMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data _CloseQuantsMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem> Recipes
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Recipes);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.RecipesComponents);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>> IDForTotalNum
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDForTotalNum);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>> IDRecipe
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.IDRecipe);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem> MatsAndGoods2
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.MatsAndGoods2);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.Actions1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties.ActionsFiller1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> Calculate
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.Calculate);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> Clear
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.Clear);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> HideZero
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.HideZero);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> CloseWaybill
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.CloseWaybill);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> ExportDataGrid
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.ExportDataGrid);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> QuantsCompute
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.QuantsCompute);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> CloseQuants
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties.CloseQuants);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> Calculate
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.Calculate);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> Clear
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.Clear);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> HideZero
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.HideZero);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> CloseWaybill
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.CloseWaybill);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> ExportDataGrid
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.ExportDataGrid);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> QuantsCompute
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.QuantsCompute);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass> CloseQuants
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties.CloseQuants);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods_OnLoaded);
                private static void _MatsAndGoods_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods, sf);
                }
                private static void _MatsAndGoods_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuery();
                }
                private static void _MatsAndGoods_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.MatsAndGoods_SelectionChanged();
                }
                private static void _MatsAndGoods_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods_Changed(e);
                }
                private static void _MatsAndGoods_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.MatsAndGoods_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry
                    Recipes = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry(
                        "Recipes",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Recipes_OnLoaded);
                private static void _Recipes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._Recipes, sf);
                }
                private static void _Recipes_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Recipes_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Recipes_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.RecipesQuery();
                }
                private static void _Recipes_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.Recipes_SelectionChanged();
                }
                private static void _Recipes_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Recipes_Changed(e);
                }
                private static void _Recipes_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.Recipes_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._RecipesComponents_OnLoaded);
                private static void _RecipesComponents_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents, sf);
                }
                private static void _RecipesComponents_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.RecipesComponentsQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _RecipesComponents_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.RecipesComponents_SelectionChanged();
                }
                private static void _RecipesComponents_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents_Changed(e);
                }
                private static void _RecipesComponents_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.RecipesComponents_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery((global::System.Nullable<decimal>)args[0]);
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Entry
                    IDForTotalNum = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "IDForTotalNum",
                        false,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDForTotalNum_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDForTotalNum_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDForTotalNum_OnValueChanged);
                private static void _IDForTotalNum_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._IDForTotalNum, sf);
                }
                private static void _IDForTotalNum_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.IDForTotalNum_Validate(r);
                }
                private static void _IDForTotalNum_OnValueChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.IDForTotalNum_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods1",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods1_OnLoaded);
                private static void _MatsAndGoods1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods1, sf);
                }
                private static void _MatsAndGoods1_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods1_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoods1Query();
                }
                private static void _MatsAndGoods1_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.MatsAndGoods1_SelectionChanged();
                }
                private static void _MatsAndGoods1_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods1_Changed(e);
                }
                private static void _MatsAndGoods1_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.MatsAndGoods1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Entry
                    IDRecipe = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "IDRecipe",
                        false,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDRecipe_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDRecipe_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._IDRecipe_OnValueChanged);
                private static void _IDRecipe_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._IDRecipe, sf);
                }
                private static void _IDRecipe_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.IDRecipe_Validate(r);
                }
                private static void _IDRecipe_OnValueChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.IDRecipe_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry
                    MatsAndGoods2 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Entry(
                        "MatsAndGoods2",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._MatsAndGoods2_OnLoaded);
                private static void _MatsAndGoods2_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.MatsAndGoodsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoods2, sf);
                }
                private static void _MatsAndGoods2_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoods2_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoods2_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoods2Query();
                }
                private static void _MatsAndGoods2_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.MatsAndGoods2_SelectionChanged();
                }
                private static void _MatsAndGoods2_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoods2_Changed(e);
                }
                private static void _MatsAndGoods2_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.MatsAndGoods2_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery();
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions1",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._Actions1_OnLoaded);
                private static void _Actions1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions1, sf);
                }
                private static void _Actions1_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions1_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.Actions1Query();
                }
                private static void _Actions1_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.Actions1_SelectionChanged();
                }
                private static void _Actions1_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions1_Changed(e);
                }
                private static void _Actions1_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.Actions1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller1",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_Validate,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_CreateQuery,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_SelectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.PropertySetProperties._ActionsFiller1_OnLoaded);
                private static void _ActionsFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller1, sf);
                }
                private static void _ActionsFiller1_Validate(global::LightSwitchApplication.ПланированиеЗакупок s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller1_CreateQuery(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object[] args)
                {
                    return d.ActionsFiller1Query();
                }
                private static void _ActionsFiller1_SelectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s)
                {
                    s.ActionsFiller1_SelectionChanged();
                }
                private static void _ActionsFiller1_OnCollectionChanged(global::LightSwitchApplication.ПланированиеЗакупок s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller1_Changed(e);
                }
                private static void _ActionsFiller1_OnLoaded(global::LightSwitchApplication.ПланированиеЗакупок s, bool succeeded)
                {
                    s.ActionsFiller1_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    Calculate = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "Calculate",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._Calculate_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._Calculate_CreateExecutableObject);
                private static void _Calculate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CalculateCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Calculate_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.Calculate.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    Clear = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "Clear",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._Clear_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._Clear_CreateExecutableObject);
                private static void _Clear_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ClearCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Clear_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.Clear.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    HideZero = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "HideZero",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._HideZero_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._HideZero_CreateExecutableObject);
                private static void _HideZero_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._HideZeroCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _HideZero_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.HideZero.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    CloseWaybill = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "CloseWaybill",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._CloseWaybill_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._CloseWaybill_CreateExecutableObject);
                private static void _CloseWaybill_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CloseWaybillCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CloseWaybill_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.CloseWaybill.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    ExportDataGrid = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "ExportDataGrid",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._ExportDataGrid_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._ExportDataGrid_CreateExecutableObject);
                private static void _ExportDataGrid_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ExportDataGridCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ExportDataGrid_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.ExportDataGrid.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    QuantsCompute = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "QuantsCompute",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._QuantsCompute_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._QuantsCompute_CreateExecutableObject);
                private static void _QuantsCompute_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._QuantsComputeCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _QuantsCompute_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.QuantsCompute.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    CloseQuants = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "CloseQuants",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._CloseQuants_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.CommandSetProperties._CloseQuants_CreateExecutableObject);
                private static void _CloseQuants_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CloseQuantsCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CloseQuants_CreateExecutableObject(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass)d).Methods.CloseQuants.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    Calculate = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "Calculate",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Calculate_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Calculate_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Calculate_InvokeMethod);
                private static void _Calculate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CalculateMethod, sf);
                }
                private static global::System.Exception _Calculate_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Calculate_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Calculate_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Calculate_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    Clear = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "Clear",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Clear_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Clear_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._Clear_InvokeMethod);
                private static void _Clear_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ClearMethod, sf);
                }
                private static global::System.Exception _Clear_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Clear_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Clear_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Clear_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    HideZero = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "HideZero",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._HideZero_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._HideZero_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._HideZero_InvokeMethod);
                private static void _HideZero_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._HideZeroMethod, sf);
                }
                private static global::System.Exception _HideZero_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.HideZero_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _HideZero_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.HideZero_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    CloseWaybill = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "CloseWaybill",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseWaybill_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseWaybill_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseWaybill_InvokeMethod);
                private static void _CloseWaybill_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CloseWaybillMethod, sf);
                }
                private static global::System.Exception _CloseWaybill_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CloseWaybill_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CloseWaybill_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CloseWaybill_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    ExportDataGrid = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "ExportDataGrid",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._ExportDataGrid_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._ExportDataGrid_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._ExportDataGrid_InvokeMethod);
                private static void _ExportDataGrid_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._ExportDataGridMethod, sf);
                }
                private static global::System.Exception _ExportDataGrid_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ExportDataGrid_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ExportDataGrid_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ExportDataGrid_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    QuantsCompute = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "QuantsCompute",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._QuantsCompute_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._QuantsCompute_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._QuantsCompute_InvokeMethod);
                private static void _QuantsCompute_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._QuantsComputeMethod, sf);
                }
                private static global::System.Exception _QuantsCompute_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.QuantsCompute_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _QuantsCompute_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.QuantsCompute_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry
                    CloseQuants = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Entry(
                        "CloseQuants",
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseQuants_Stub,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseQuants_CanInvoke,
                        global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass.MethodSetProperties._CloseQuants_InvokeMethod);
                private static void _CloseQuants_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПланированиеЗакупок, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass>.Data> c, global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, object sf)
                {
                    c(d, ref d._CloseQuantsMethod, sf);
                }
                private static global::System.Exception _CloseQuants_CanInvoke(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CloseQuants_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CloseQuants_InvokeMethod(global::LightSwitchApplication.ПланированиеЗакупок.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CloseQuants_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Поставщики
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Поставщики() : base("LightSwitchApplication.Sklad.DesktopClient:Поставщики")
        {
            global::LightSwitchApplication.Поставщики.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Поставщики CreateInstance()
        {
            return new global::LightSwitchApplication.Поставщики(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Поставщики_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Suppliers_SelectionChanged();

        partial void Suppliers_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Suppliers_Loaded(bool succeeded);

        partial void Suppliers1_SelectionChanged();

        partial void Suppliers1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Suppliers1_Loaded(bool succeeded);

        partial void Name_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Suppliers. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SuppliersItem> Suppliers
        {
            get
            {
                return global::LightSwitchApplication.Поставщики.DetailsClass.GetValue(this, global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Suppliers);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Suppliers_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Suppliers1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SuppliersItem> Suppliers1
        {
            get
            {
                return global::LightSwitchApplication.Поставщики.DetailsClass.GetValue(this, global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Suppliers1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Suppliers1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Поставщики.DetailsClass.GetValue(this, global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Поставщики.DetailsClass.SetValue(this, global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана NewSupplierOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewSupplierOk()
        {
            this.Details.Methods.NewSupplierOk.CreateInvocation().Execute();
        }
        partial void NewSupplierOk_CanExecute(ref bool result);
        partial void NewSupplierOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewSupplierCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewSupplierCancel()
        {
            this.Details.Methods.NewSupplierCancel.CreateInvocation().Execute();
        }
        partial void NewSupplierCancel_CanExecute(ref bool result);
        partial void NewSupplierCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана EditSupplierOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void EditSupplierOk()
        {
            this.Details.Methods.EditSupplierOk.CreateInvocation().Execute();
        }
        partial void EditSupplierOk_CanExecute(ref bool result);
        partial void EditSupplierOk_Execute();

        /// <summary>
        /// Вызывает метод экрана EditSupplierCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void EditSupplierCancel()
        {
            this.Details.Methods.EditSupplierCancel.CreateInvocation().Execute();
        }
        partial void EditSupplierCancel_CanExecute(ref bool result);
        partial void EditSupplierCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана gridAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridAddAndEditNew()
        {
            this.Details.Methods.gridAddAndEditNew.CreateInvocation().Execute();
        }
        partial void gridAddAndEditNew_CanExecute(ref bool result);
        partial void gridAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана gridEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridEditSelected()
        {
            this.Details.Methods.gridEditSelected.CreateInvocation().Execute();
        }
        partial void gridEditSelected_CanExecute(ref bool result);
        partial void gridEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана gridDeleteSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridDeleteSelected()
        {
            this.Details.Methods.gridDeleteSelected.CreateInvocation().Execute();
        }
        partial void gridDeleteSelected_CanExecute(ref bool result);
        partial void gridDeleteSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана ExcelSuppliers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ExcelSuppliers()
        {
            this.Details.Methods.ExcelSuppliers.CreateInvocation().Execute();
        }
        partial void ExcelSuppliers_CanExecute(ref bool result);
        partial void ExcelSuppliers_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.Поставщики.DetailsClass.PropertySet, global::LightSwitchApplication.Поставщики.DetailsClass.CommandSet, global::LightSwitchApplication.Поставщики.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Suppliers;
                var initializeCommandEntry = global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.NewSupplierOk;
                var initializeMethodEntry = global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.NewSupplierOk;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                __ПоставщикиEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeSavingEvent,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeSavedEvent,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeClosingEvent,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeCreated,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeActivated,
                    global::LightSwitchApplication.Поставщики.DetailsClass.__Поставщики_InvokeSaveErrorEvent);
            private static void __Поставщики_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Поставщики s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Поставщики_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Поставщики_InvokeSavingEvent(global::LightSwitchApplication.Поставщики s)
            {
                bool handled = false;
                s.Поставщики_Saving(ref handled);
                return handled;
            }
            private static void __Поставщики_InvokeSavedEvent(global::LightSwitchApplication.Поставщики s)
            {
                s.Поставщики_Saved();
            }
            private static bool __Поставщики_InvokeClosingEvent(global::LightSwitchApplication.Поставщики s)
            {
                bool cancel = false;
                s.Поставщики_Closing(ref cancel);
                return cancel;
            }
            private static void __Поставщики_InvokeCreated(global::LightSwitchApplication.Поставщики s)
            {
                s.Поставщики_Created();
            }
            private static void __Поставщики_InvokeActivated(global::LightSwitchApplication.Поставщики s)
            {
                s.Поставщики_Activated();
            }
            private static bool __Поставщики_InvokeSaveErrorEvent(global::LightSwitchApplication.Поставщики s, global::System.Exception ex)
            {
                bool handled = false;
                s.Поставщики_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Поставщики.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Поставщики.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Поставщики.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SuppliersQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.Suppliers,
                        (s) => ((s.ID > 0m) && ((Name == null) || s.Name.Contains(Name)))),
                    (s) => s.Name);
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Suppliers1Query()
            {
                return this.Screen.DataWorkspace.skladData.Suppliers;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Data _Suppliers;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Data _Suppliers1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _NewSupplierOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _NewSupplierCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _EditSupplierOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _EditSupplierCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridDeleteSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _ExcelSuppliersCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _NewSupplierOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _NewSupplierCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _EditSupplierOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _EditSupplierCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _gridDeleteSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data _ExcelSuppliersMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem> Suppliers
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Suppliers);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem> Suppliers1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Suppliers1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties.Name);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> NewSupplierOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.NewSupplierOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> NewSupplierCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.NewSupplierCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> EditSupplierOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.EditSupplierOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> EditSupplierCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.EditSupplierCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.gridEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.gridDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> ExcelSuppliers
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties.ExcelSuppliers);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> NewSupplierOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.NewSupplierOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> NewSupplierCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.NewSupplierCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> EditSupplierOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.EditSupplierOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> EditSupplierCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.EditSupplierCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.gridEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> gridDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.gridDeleteSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass> ExcelSuppliers
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>)base.GetItem(global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties.ExcelSuppliers);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Entry
                    Suppliers = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Entry(
                        "Suppliers",
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_Validate,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_CreateQuery,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_SelectionChanged,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_OnCollectionChanged,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers_OnLoaded);
                private static void _Suppliers_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._Suppliers, sf);
                }
                private static void _Suppliers_Validate(global::LightSwitchApplication.Поставщики s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Suppliers_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Suppliers_CreateQuery(global::LightSwitchApplication.Поставщики.DetailsClass d, object[] args)
                {
                    return d.SuppliersQuery((string)args[0]);
                }
                private static void _Suppliers_SelectionChanged(global::LightSwitchApplication.Поставщики s)
                {
                    s.Suppliers_SelectionChanged();
                }
                private static void _Suppliers_OnCollectionChanged(global::LightSwitchApplication.Поставщики s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Suppliers_Changed(e);
                }
                private static void _Suppliers_OnLoaded(global::LightSwitchApplication.Поставщики s, bool succeeded)
                {
                    s.Suppliers_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Entry
                    Suppliers1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Entry(
                        "Suppliers1",
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_Validate,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_CreateQuery,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_SelectionChanged,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_OnCollectionChanged,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Suppliers1_OnLoaded);
                private static void _Suppliers1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, global::LightSwitchApplication.SuppliersItem>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._Suppliers1, sf);
                }
                private static void _Suppliers1_Validate(global::LightSwitchApplication.Поставщики s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Suppliers1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Suppliers1_CreateQuery(global::LightSwitchApplication.Поставщики.DetailsClass d, object[] args)
                {
                    return d.Suppliers1Query();
                }
                private static void _Suppliers1_SelectionChanged(global::LightSwitchApplication.Поставщики s)
                {
                    s.Suppliers1_SelectionChanged();
                }
                private static void _Suppliers1_OnCollectionChanged(global::LightSwitchApplication.Поставщики s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Suppliers1_Changed(e);
                }
                private static void _Suppliers1_OnLoaded(global::LightSwitchApplication.Поставщики s, bool succeeded)
                {
                    s.Suppliers1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Поставщики.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass, string>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Поставщики s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Поставщики s)
                {
                    s.Name_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    NewSupplierOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "NewSupplierOk",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._NewSupplierOk_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._NewSupplierOk_CreateExecutableObject);
                private static void _NewSupplierOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._NewSupplierOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewSupplierOk_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.NewSupplierOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    NewSupplierCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "NewSupplierCancel",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._NewSupplierCancel_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._NewSupplierCancel_CreateExecutableObject);
                private static void _NewSupplierCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._NewSupplierCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewSupplierCancel_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.NewSupplierCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    EditSupplierOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "EditSupplierOk",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._EditSupplierOk_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._EditSupplierOk_CreateExecutableObject);
                private static void _EditSupplierOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._EditSupplierOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _EditSupplierOk_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.EditSupplierOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    EditSupplierCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "EditSupplierCancel",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._EditSupplierCancel_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._EditSupplierCancel_CreateExecutableObject);
                private static void _EditSupplierCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._EditSupplierCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _EditSupplierCancel_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.EditSupplierCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridAddAndEditNew_CreateExecutableObject);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.gridAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridEditSelected_CreateExecutableObject);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridEditSelected_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.gridEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridDeleteSelected",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridDeleteSelected_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._gridDeleteSelected_CreateExecutableObject);
                private static void _gridDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridDeleteSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridDeleteSelected_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.gridDeleteSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    ExcelSuppliers = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "ExcelSuppliers",
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._ExcelSuppliers_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.CommandSetProperties._ExcelSuppliers_CreateExecutableObject);
                private static void _ExcelSuppliers_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._ExcelSuppliersCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ExcelSuppliers_CreateExecutableObject(global::LightSwitchApplication.Поставщики.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Поставщики.DetailsClass)d).Methods.ExcelSuppliers.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    NewSupplierOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "NewSupplierOk",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierOk_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierOk_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierOk_InvokeMethod);
                private static void _NewSupplierOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._NewSupplierOkMethod, sf);
                }
                private static global::System.Exception _NewSupplierOk_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewSupplierOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewSupplierOk_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewSupplierOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    NewSupplierCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "NewSupplierCancel",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierCancel_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierCancel_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._NewSupplierCancel_InvokeMethod);
                private static void _NewSupplierCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._NewSupplierCancelMethod, sf);
                }
                private static global::System.Exception _NewSupplierCancel_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewSupplierCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewSupplierCancel_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewSupplierCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    EditSupplierOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "EditSupplierOk",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierOk_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierOk_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierOk_InvokeMethod);
                private static void _EditSupplierOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._EditSupplierOkMethod, sf);
                }
                private static global::System.Exception _EditSupplierOk_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.EditSupplierOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _EditSupplierOk_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.EditSupplierOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    EditSupplierCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "EditSupplierCancel",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierCancel_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierCancel_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._EditSupplierCancel_InvokeMethod);
                private static void _EditSupplierCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._EditSupplierCancelMethod, sf);
                }
                private static global::System.Exception _EditSupplierCancel_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.EditSupplierCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _EditSupplierCancel_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.EditSupplierCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridAddAndEditNew_InvokeMethod);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _gridAddAndEditNew_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridEditSelected_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridEditSelected_InvokeMethod);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedMethod, sf);
                }
                private static global::System.Exception _gridEditSelected_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridEditSelected_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    gridDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "gridDeleteSelected",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridDeleteSelected_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridDeleteSelected_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._gridDeleteSelected_InvokeMethod);
                private static void _gridDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._gridDeleteSelectedMethod, sf);
                }
                private static global::System.Exception _gridDeleteSelected_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridDeleteSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridDeleteSelected_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridDeleteSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry
                    ExcelSuppliers = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Entry(
                        "ExcelSuppliers",
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._ExcelSuppliers_Stub,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._ExcelSuppliers_CanInvoke,
                        global::LightSwitchApplication.Поставщики.DetailsClass.MethodSetProperties._ExcelSuppliers_InvokeMethod);
                private static void _ExcelSuppliers_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Поставщики.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Поставщики, global::LightSwitchApplication.Поставщики.DetailsClass>.Data> c, global::LightSwitchApplication.Поставщики.DetailsClass d, object sf)
                {
                    c(d, ref d._ExcelSuppliersMethod, sf);
                }
                private static global::System.Exception _ExcelSuppliers_CanInvoke(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ExcelSuppliers_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ExcelSuppliers_InvokeMethod(global::LightSwitchApplication.Поставщики.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ExcelSuppliers_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class ПриходПокупныхКомплектующих
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ПриходПокупныхКомплектующих() : base("LightSwitchApplication.Sklad.DesktopClient:ПриходПокупныхКомплектующих")
        {
            global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ПриходПокупныхКомплектующих CreateInstance()
        {
            return new global::LightSwitchApplication.ПриходПокупныхКомплектующих(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ПриходПокупныхКомплектующих_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void Actions1_SelectionChanged();

        partial void Actions1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Loaded(bool succeeded);

        partial void ActionsFiller1_SelectionChanged();

        partial void ActionsFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Loaded(bool succeeded);

        partial void Skladi_SelectionChanged();

        partial void Skladi_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Loaded(bool succeeded);

        partial void NumberIn_Changed();

        partial void NumberDirect_Changed();

        partial void Name_Changed();

        partial void SkladName_Changed();

        partial void CreationDateMore_Changed();

        partial void CreationDateLess_Changed();

        partial void PriceMore_Changed();

        partial void PriceLess_Changed();

        partial void SuppName_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions1
        {
            get
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Actions1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
        {
            get
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.ActionsFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Skladi. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> Skladi
        {
            get
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Skladi);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberIn
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberIn);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberIn, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberIn_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberDirect
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberDirect);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberDirect, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NumberDirect_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladName
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SkladName);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SkladName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateMore
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateMore);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateLess
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateLess);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> PriceMore
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceMore);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PriceMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> PriceLess
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceLess);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PriceLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SuppName
        {
            get 
            {
                return global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.GetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SuppName);
            }
            set
            {
                global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.SetValue(this, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SuppName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SuppName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана NewActionOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionOk()
        {
            this.Details.Methods.NewActionOk.CreateInvocation().Execute();
        }
        partial void NewActionOk_CanExecute(ref bool result);
        partial void NewActionOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewActionCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionCancel()
        {
            this.Details.Methods.NewActionCancel.CreateInvocation().Execute();
        }
        partial void NewActionCancel_CanExecute(ref bool result);
        partial void NewActionCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListAddAndEditNew()
        {
            this.Details.Methods.ActionsItemListAddAndEditNew.CreateInvocation().Execute();
        }
        partial void ActionsItemListAddAndEditNew_CanExecute(ref bool result);
        partial void ActionsItemListAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListEditSelected()
        {
            this.Details.Methods.ActionsItemListEditSelected.CreateInvocation().Execute();
        }
        partial void ActionsItemListEditSelected_CanExecute(ref bool result);
        partial void ActionsItemListEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана Total.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Total()
        {
            this.Details.Methods.Total.CreateInvocation().Execute();
        }
        partial void Total_CanExecute(ref bool result);
        partial void Total_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelApply()
        {
            this.Details.Methods.CancelApply.CreateInvocation().Execute();
        }
        partial void CancelApply_CanExecute(ref bool result);
        partial void CancelApply_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        /// <summary>
        /// Вызывает метод экрана AddAsWas.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAsWas()
        {
            this.Details.Methods.AddAsWas.CreateInvocation().Execute();
        }
        partial void AddAsWas_CanExecute(ref bool result);
        partial void AddAsWas_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySet, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSet, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Actions;
                var initializeCommandEntry = global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.NewActionOk;
                var initializeMethodEntry = global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.NewActionOk;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                __ПриходПокупныхКомплектующихEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeSavingEvent,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeSavedEvent,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeClosingEvent,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeCreated,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeActivated,
                    global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.__ПриходПокупныхКомплектующих_InvokeSaveErrorEvent);
            private static void __ПриходПокупныхКомплектующих_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ПриходПокупныхКомплектующих_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ПриходПокупныхКомплектующих_InvokeSavingEvent(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
            {
                bool handled = false;
                s.ПриходПокупныхКомплектующих_Saving(ref handled);
                return handled;
            }
            private static void __ПриходПокупныхКомплектующих_InvokeSavedEvent(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
            {
                s.ПриходПокупныхКомплектующих_Saved();
            }
            private static bool __ПриходПокупныхКомплектующих_InvokeClosingEvent(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
            {
                bool cancel = false;
                s.ПриходПокупныхКомплектующих_Closing(ref cancel);
                return cancel;
            }
            private static void __ПриходПокупныхКомплектующих_InvokeCreated(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
            {
                s.ПриходПокупныхКомплектующих_Created();
            }
            private static void __ПриходПокупныхКомплектующих_InvokeActivated(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
            {
                s.ПриходПокупныхКомплектующих_Activated();
            }
            private static bool __ПриходПокупныхКомплектующих_InvokeSaveErrorEvent(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Exception ex)
            {
                bool handled = false;
                s.ПриходПокупныхКомплектующих_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery(global::System.Nullable<global::System.DateTime> CreationDateMore, global::System.Nullable<global::System.DateTime> CreationDateLess, string Action, string NumberIn, string NumberDirect, global::System.Nullable<decimal> PriceMore, global::System.Nullable<decimal> PriceLess, string SuppName, string SkladName)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Actions,
                            (a) => ((((((((((Action == null) || a.Action.Contains(Action)) && ((NumberDirect == null) || (a.Number.CompareTo(NumberDirect) == 0))) && ((CreationDateMore.HasValue == false) || (CreationDateMore.HasValue && (a.CreationDate >= CreationDateMore)))) && ((CreationDateLess.HasValue == false) || (CreationDateLess.HasValue && (a.CreationDate <= CreationDateLess)))) && ((SkladName == null) || a.SkladiItem1.Name.Contains(SkladName))) && ((PriceMore.HasValue == false) || (a.Price.HasValue && (PriceMore.HasValue && (a.Price >= PriceMore))))) && ((SuppName == null) || a.SuppliersItem.Name.Contains(SuppName))) && ((NumberIn == null) || a.Number.Contains(NumberIn))) && ((PriceLess.HasValue == false) || (a.Price.HasValue && (PriceLess.HasValue && (a.Price <= PriceLess)))))),
                        "SkladiItem1"),
                    "SuppliersItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Actions1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Actions,
                            (a) => (a.ID == 0m)),
                        "SkladiItem1"),
                    "SuppliersItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFiller1Query()
            {
                if (this.Screen.Actions1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions1.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        loader,
                        (a) => (a.ID == 0m)),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Skladi,
                    (s) => (s.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _Skladi;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data _NumberIn;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data _NumberDirect;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data _SkladName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Data _PriceMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Data _PriceLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data _SuppName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _NewActionOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _NewActionCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _ActionsItemListAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _ActionsItemListEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _TotalCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _CancelApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _AddAsWasCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _NewActionOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _NewActionCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _ActionsItemListAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _ActionsItemListEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _TotalMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _CancelApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _SearchCloseMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data _AddAsWasMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Actions1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.ActionsFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem> Skladi
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Skladi);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string> NumberIn
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberIn);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string> NumberDirect
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.NumberDirect);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.Name);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string> SkladName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SkladName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.CreationDateLess);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>> PriceMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>> PriceLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.PriceLess);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string> SuppName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties.SuppName);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> Total
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.Total);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties.AddAsWas);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> Total
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.Total);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass> AddAsWas
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>)base.GetItem(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties.AddAsWas);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery((global::System.Nullable<global::System.DateTime>)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (string)args[2], (string)args[3], (string)args[4], (global::System.Nullable<decimal>)args[5], (global::System.Nullable<decimal>)args[6], (string)args[7], (string)args[8]);
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions1",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_CreateQuery,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_SelectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_OnCollectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Actions1_OnLoaded);
                private static void _Actions1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions1, sf);
                }
                private static void _Actions1_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions1_CreateQuery(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object[] args)
                {
                    return d.Actions1Query();
                }
                private static void _Actions1_SelectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.Actions1_SelectionChanged();
                }
                private static void _Actions1_OnCollectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions1_Changed(e);
                }
                private static void _Actions1_OnLoaded(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, bool succeeded)
                {
                    s.Actions1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller1",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_CreateQuery,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_SelectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._ActionsFiller1_OnLoaded);
                private static void _ActionsFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller1, sf);
                }
                private static void _ActionsFiller1_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller1_CreateQuery(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object[] args)
                {
                    return d.ActionsFiller1Query();
                }
                private static void _ActionsFiller1_SelectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.ActionsFiller1_SelectionChanged();
                }
                private static void _ActionsFiller1_OnCollectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller1_Changed(e);
                }
                private static void _ActionsFiller1_OnLoaded(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, bool succeeded)
                {
                    s.ActionsFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    Skladi = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "Skladi",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_CreateQuery,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_SelectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_OnCollectionChanged,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Skladi_OnLoaded);
                private static void _Skladi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._Skladi, sf);
                }
                private static void _Skladi_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Skladi_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Skladi_CreateQuery(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object[] args)
                {
                    return d.SkladiQuery();
                }
                private static void _Skladi_SelectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.Skladi_SelectionChanged();
                }
                private static void _Skladi_OnCollectionChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Skladi_Changed(e);
                }
                private static void _Skladi_OnLoaded(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, bool succeeded)
                {
                    s.Skladi_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry
                    NumberIn = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry(
                        "NumberIn",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberIn_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberIn_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberIn_OnValueChanged);
                private static void _NumberIn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberIn, sf);
                }
                private static void _NumberIn_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberIn_Validate(r);
                }
                private static void _NumberIn_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.NumberIn_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry
                    NumberDirect = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry(
                        "NumberDirect",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberDirect_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberDirect_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._NumberDirect_OnValueChanged);
                private static void _NumberDirect_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NumberDirect, sf);
                }
                private static void _NumberDirect_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.NumberDirect_Validate(r);
                }
                private static void _NumberDirect_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.NumberDirect_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.Name_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry
                    SkladName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry(
                        "SkladName",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SkladName_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SkladName_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SkladName_OnValueChanged);
                private static void _SkladName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladName, sf);
                }
                private static void _SkladName_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladName_Validate(r);
                }
                private static void _SkladName_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.SkladName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateMore",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateMore_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateMore_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateMore_OnValueChanged);
                private static void _CreationDateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateMore, sf);
                }
                private static void _CreationDateMore_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateMore_Validate(r);
                }
                private static void _CreationDateMore_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.CreationDateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateLess",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateLess_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateLess_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._CreationDateLess_OnValueChanged);
                private static void _CreationDateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateLess, sf);
                }
                private static void _CreationDateLess_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateLess_Validate(r);
                }
                private static void _CreationDateLess_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.CreationDateLess_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Entry
                    PriceMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "PriceMore",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceMore_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceMore_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceMore_OnValueChanged);
                private static void _PriceMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._PriceMore, sf);
                }
                private static void _PriceMore_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.PriceMore_Validate(r);
                }
                private static void _PriceMore_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.PriceMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Entry
                    PriceLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "PriceLess",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceLess_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceLess_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._PriceLess_OnValueChanged);
                private static void _PriceLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._PriceLess, sf);
                }
                private static void _PriceLess_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.PriceLess_Validate(r);
                }
                private static void _PriceLess_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.PriceLess_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry
                    SuppName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Entry(
                        "SuppName",
                        false,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SuppName_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SuppName_Validate,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.PropertySetProperties._SuppName_OnValueChanged);
                private static void _SuppName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, string>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SuppName, sf);
                }
                private static void _SuppName_Validate(global::LightSwitchApplication.ПриходПокупныхКомплектующих s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SuppName_Validate(r);
                }
                private static void _SuppName_OnValueChanged(global::LightSwitchApplication.ПриходПокупныхКомплектующих s)
                {
                    s.SuppName_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._NewActionOk_CreateExecutableObject);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionOk_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.NewActionOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._NewActionCancel_CreateExecutableObject);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionCancel_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.NewActionCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_CreateExecutableObject);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.ActionsItemListAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_CreateExecutableObject);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListEditSelected_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.ActionsItemListEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    Total = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "Total",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._Total_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._Total_CreateExecutableObject);
                private static void _Total_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._TotalCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Total_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.Total.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._CancelApply_CreateExecutableObject);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelApply_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.CancelApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.CommandSetProperties._AddAsWas_CreateExecutableObject);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddAsWas_CreateExecutableObject(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass)d).Methods.AddAsWas.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionOk_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionOk_InvokeMethod);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkMethod, sf);
                }
                private static global::System.Exception _NewActionOk_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionOk_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionCancel_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._NewActionCancel_InvokeMethod);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelMethod, sf);
                }
                private static global::System.Exception _NewActionCancel_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionCancel_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_InvokeMethod);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _ActionsItemListAddAndEditNew_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListAddAndEditNew_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_InvokeMethod);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedMethod, sf);
                }
                private static global::System.Exception _ActionsItemListEditSelected_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListEditSelected_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    Total = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "Total",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._Total_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._Total_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._Total_InvokeMethod);
                private static void _Total_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._TotalMethod, sf);
                }
                private static global::System.Exception _Total_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Total_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Total_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Total_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._CancelApply_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._CancelApply_InvokeMethod);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyMethod, sf);
                }
                private static global::System.Exception _CancelApply_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelApply_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry
                    AddAsWas = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Entry(
                        "AddAsWas",
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._AddAsWas_Stub,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._AddAsWas_CanInvoke,
                        global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass.MethodSetProperties._AddAsWas_InvokeMethod);
                private static void _AddAsWas_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ПриходПокупныхКомплектующих, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass>.Data> c, global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, object sf)
                {
                    c(d, ref d._AddAsWasMethod, sf);
                }
                private static global::System.Exception _AddAsWas_CanInvoke(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddAsWas_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddAsWas_InvokeMethod(global::LightSwitchApplication.ПриходПокупныхКомплектующих.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddAsWas_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Склады
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Склады() : base("LightSwitchApplication.Sklad.DesktopClient:Склады")
        {
            global::LightSwitchApplication.Склады.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Склады CreateInstance()
        {
            return new global::LightSwitchApplication.Склады(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Склады_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Skladi_SelectionChanged();

        partial void Skladi_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Loaded(bool succeeded);

        partial void SkladiModalWindow_SelectionChanged();

        partial void SkladiModalWindow_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladiModalWindow_Loaded(bool succeeded);

        partial void MatsAndGoodsQuantities_SelectionChanged();

        partial void MatsAndGoodsQuantities_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Loaded(bool succeeded);

        partial void Name_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Skladi. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> Skladi
        {
            get
            {
                return global::LightSwitchApplication.Склады.DetailsClass.GetValue(this, global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Skladi);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов SkladiModalWindow. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> SkladiModalWindow
        {
            get
            {
                return global::LightSwitchApplication.Склады.DetailsClass.GetValue(this, global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.SkladiModalWindow);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladiModalWindow_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов MatsAndGoodsQuantities. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
        {
            get
            {
                return global::LightSwitchApplication.Склады.DetailsClass.GetValue(this, global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MatsAndGoodsQuantities_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Склады.DetailsClass.GetValue(this, global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Склады.DetailsClass.SetValue(this, global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана SkladOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SkladOk()
        {
            this.Details.Methods.SkladOk.CreateInvocation().Execute();
        }
        partial void SkladOk_CanExecute(ref bool result);
        partial void SkladOk_Execute();

        /// <summary>
        /// Вызывает метод экрана SkladCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SkladCancel()
        {
            this.Details.Methods.SkladCancel.CreateInvocation().Execute();
        }
        partial void SkladCancel_CanExecute(ref bool result);
        partial void SkladCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана gridAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridAddAndEditNew()
        {
            this.Details.Methods.gridAddAndEditNew.CreateInvocation().Execute();
        }
        partial void gridAddAndEditNew_CanExecute(ref bool result);
        partial void gridAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана SkladEditOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SkladEditOk()
        {
            this.Details.Methods.SkladEditOk.CreateInvocation().Execute();
        }
        partial void SkladEditOk_CanExecute(ref bool result);
        partial void SkladEditOk_Execute();

        /// <summary>
        /// Вызывает метод экрана SkladEditCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SkladEditCancel()
        {
            this.Details.Methods.SkladEditCancel.CreateInvocation().Execute();
        }
        partial void SkladEditCancel_CanExecute(ref bool result);
        partial void SkladEditCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана gridEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridEditSelected()
        {
            this.Details.Methods.gridEditSelected.CreateInvocation().Execute();
        }
        partial void gridEditSelected_CanExecute(ref bool result);
        partial void gridEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана gridDeleteSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void gridDeleteSelected()
        {
            this.Details.Methods.gridDeleteSelected.CreateInvocation().Execute();
        }
        partial void gridDeleteSelected_CanExecute(ref bool result);
        partial void gridDeleteSelected_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.Склады.DetailsClass.PropertySet, global::LightSwitchApplication.Склады.DetailsClass.CommandSet, global::LightSwitchApplication.Склады.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Skladi;
                var initializeCommandEntry = global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.SkladOk;
                var initializeMethodEntry = global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.SkladOk;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                __СкладыEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeSavingEvent,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeSavedEvent,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeClosingEvent,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeCreated,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeActivated,
                    global::LightSwitchApplication.Склады.DetailsClass.__Склады_InvokeSaveErrorEvent);
            private static void __Склады_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Склады s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Склады_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Склады_InvokeSavingEvent(global::LightSwitchApplication.Склады s)
            {
                bool handled = false;
                s.Склады_Saving(ref handled);
                return handled;
            }
            private static void __Склады_InvokeSavedEvent(global::LightSwitchApplication.Склады s)
            {
                s.Склады_Saved();
            }
            private static bool __Склады_InvokeClosingEvent(global::LightSwitchApplication.Склады s)
            {
                bool cancel = false;
                s.Склады_Closing(ref cancel);
                return cancel;
            }
            private static void __Склады_InvokeCreated(global::LightSwitchApplication.Склады s)
            {
                s.Склады_Created();
            }
            private static void __Склады_InvokeActivated(global::LightSwitchApplication.Склады s)
            {
                s.Склады_Activated();
            }
            private static bool __Склады_InvokeSaveErrorEvent(global::LightSwitchApplication.Склады s, global::System.Exception ex)
            {
                bool handled = false;
                s.Склады_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Склады.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Склады.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Склады.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Skladi,
                    (s) => ((s.Status.CompareTo("Функционирует") == 0) && ((Name == null) || s.Name.Contains(Name))));
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiModalWindowQuery()
            {
                return this.Screen.DataWorkspace.skladData.Skladi;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable MatsAndGoodsQuantitiesQuery()
            {
                if (this.Screen.Skladi.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Skladi.SelectedItem.Details.Properties.MatsAndGoodsQuantities).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _Skladi;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _SkladiModalWindow;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data _MatsAndGoodsQuantities;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladEditOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladEditCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridDeleteSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladEditOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _SkladEditCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data _gridDeleteSelectedMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem> Skladi
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Skladi);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem> SkladiModalWindow
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.SkladiModalWindow);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem> MatsAndGoodsQuantities
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.MatsAndGoodsQuantities);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties.Name);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.SkladOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.SkladCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladEditOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.SkladEditOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladEditCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.SkladEditCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.gridEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties.gridDeleteSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.SkladOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.SkladCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.gridAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladEditOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.SkladEditOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> SkladEditCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.SkladEditCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.gridEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass> gridDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>)base.GetItem(global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties.gridDeleteSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    Skladi = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "Skladi",
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_Validate,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_CreateQuery,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_SelectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_OnCollectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Skladi_OnLoaded);
                private static void _Skladi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._Skladi, sf);
                }
                private static void _Skladi_Validate(global::LightSwitchApplication.Склады s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Skladi_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Skladi_CreateQuery(global::LightSwitchApplication.Склады.DetailsClass d, object[] args)
                {
                    return d.SkladiQuery((string)args[0]);
                }
                private static void _Skladi_SelectionChanged(global::LightSwitchApplication.Склады s)
                {
                    s.Skladi_SelectionChanged();
                }
                private static void _Skladi_OnCollectionChanged(global::LightSwitchApplication.Склады s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Skladi_Changed(e);
                }
                private static void _Skladi_OnLoaded(global::LightSwitchApplication.Склады s, bool succeeded)
                {
                    s.Skladi_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    SkladiModalWindow = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "SkladiModalWindow",
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_Validate,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_CreateQuery,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_SelectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_OnCollectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._SkladiModalWindow_OnLoaded);
                private static void _SkladiModalWindow_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladiModalWindow, sf);
                }
                private static void _SkladiModalWindow_Validate(global::LightSwitchApplication.Склады s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladiModalWindow_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _SkladiModalWindow_CreateQuery(global::LightSwitchApplication.Склады.DetailsClass d, object[] args)
                {
                    return d.SkladiModalWindowQuery();
                }
                private static void _SkladiModalWindow_SelectionChanged(global::LightSwitchApplication.Склады s)
                {
                    s.SkladiModalWindow_SelectionChanged();
                }
                private static void _SkladiModalWindow_OnCollectionChanged(global::LightSwitchApplication.Склады s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.SkladiModalWindow_Changed(e);
                }
                private static void _SkladiModalWindow_OnLoaded(global::LightSwitchApplication.Склады s, bool succeeded)
                {
                    s.SkladiModalWindow_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry
                    MatsAndGoodsQuantities = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Entry(
                        "MatsAndGoodsQuantities",
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_Validate,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_CreateQuery,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_SelectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnCollectionChanged,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._MatsAndGoodsQuantities_OnLoaded);
                private static void _MatsAndGoodsQuantities_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, global::LightSwitchApplication.MatsAndGoodsQuantitiesItem>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._MatsAndGoodsQuantities, sf);
                }
                private static void _MatsAndGoodsQuantities_Validate(global::LightSwitchApplication.Склады s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.MatsAndGoodsQuantities_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _MatsAndGoodsQuantities_CreateQuery(global::LightSwitchApplication.Склады.DetailsClass d, object[] args)
                {
                    return d.MatsAndGoodsQuantitiesQuery();
                }
                private static void _MatsAndGoodsQuantities_SelectionChanged(global::LightSwitchApplication.Склады s)
                {
                    s.MatsAndGoodsQuantities_SelectionChanged();
                }
                private static void _MatsAndGoodsQuantities_OnCollectionChanged(global::LightSwitchApplication.Склады s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.MatsAndGoodsQuantities_Changed(e);
                }
                private static void _MatsAndGoodsQuantities_OnLoaded(global::LightSwitchApplication.Склады s, bool succeeded)
                {
                    s.MatsAndGoodsQuantities_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Склады.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass, string>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Склады s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Склады s)
                {
                    s.Name_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladOk",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladOk_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladOk_CreateExecutableObject);
                private static void _SkladOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SkladOk_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.SkladOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladCancel",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladCancel_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladCancel_CreateExecutableObject);
                private static void _SkladCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SkladCancel_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.SkladCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridAddAndEditNew_CreateExecutableObject);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.gridAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladEditOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladEditOk",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladEditOk_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladEditOk_CreateExecutableObject);
                private static void _SkladEditOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladEditOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SkladEditOk_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.SkladEditOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladEditCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladEditCancel",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladEditCancel_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._SkladEditCancel_CreateExecutableObject);
                private static void _SkladEditCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladEditCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SkladEditCancel_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.SkladEditCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridEditSelected_CreateExecutableObject);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridEditSelected_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.gridEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridDeleteSelected",
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridDeleteSelected_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.CommandSetProperties._gridDeleteSelected_CreateExecutableObject);
                private static void _gridDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridDeleteSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _gridDeleteSelected_CreateExecutableObject(global::LightSwitchApplication.Склады.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Склады.DetailsClass)d).Methods.gridDeleteSelected.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladOk",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladOk_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladOk_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladOk_InvokeMethod);
                private static void _SkladOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladOkMethod, sf);
                }
                private static global::System.Exception _SkladOk_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SkladOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SkladOk_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SkladOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladCancel",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladCancel_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladCancel_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladCancel_InvokeMethod);
                private static void _SkladCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladCancelMethod, sf);
                }
                private static global::System.Exception _SkladCancel_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SkladCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SkladCancel_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SkladCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridAddAndEditNew",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridAddAndEditNew_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridAddAndEditNew_InvokeMethod);
                private static void _gridAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _gridAddAndEditNew_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladEditOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladEditOk",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditOk_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditOk_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditOk_InvokeMethod);
                private static void _SkladEditOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladEditOkMethod, sf);
                }
                private static global::System.Exception _SkladEditOk_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SkladEditOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SkladEditOk_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SkladEditOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    SkladEditCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "SkladEditCancel",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditCancel_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditCancel_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._SkladEditCancel_InvokeMethod);
                private static void _SkladEditCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladEditCancelMethod, sf);
                }
                private static global::System.Exception _SkladEditCancel_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SkladEditCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SkladEditCancel_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SkladEditCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridEditSelected",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridEditSelected_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridEditSelected_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridEditSelected_InvokeMethod);
                private static void _gridEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridEditSelectedMethod, sf);
                }
                private static global::System.Exception _gridEditSelected_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridEditSelected_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry
                    gridDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Entry(
                        "gridDeleteSelected",
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridDeleteSelected_Stub,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridDeleteSelected_CanInvoke,
                        global::LightSwitchApplication.Склады.DetailsClass.MethodSetProperties._gridDeleteSelected_InvokeMethod);
                private static void _gridDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Склады.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Склады, global::LightSwitchApplication.Склады.DetailsClass>.Data> c, global::LightSwitchApplication.Склады.DetailsClass d, object sf)
                {
                    c(d, ref d._gridDeleteSelectedMethod, sf);
                }
                private static global::System.Exception _gridDeleteSelected_CanInvoke(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.gridDeleteSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _gridDeleteSelected_InvokeMethod(global::LightSwitchApplication.Склады.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.gridDeleteSelected_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Спецификации
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Спецификации() : base("LightSwitchApplication.Sklad.DesktopClient:Спецификации")
        {
            global::LightSwitchApplication.Спецификации.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Спецификации CreateInstance()
        {
            return new global::LightSwitchApplication.Спецификации(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Спецификации_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Recipes_SelectionChanged();

        partial void Recipes_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Loaded(bool succeeded);

        partial void RecipesComponents_SelectionChanged();

        partial void RecipesComponents_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Loaded(bool succeeded);

        partial void Recipes1_SelectionChanged();

        partial void Recipes1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes1_Loaded(bool succeeded);

        partial void RecipesComponents1_SelectionChanged();

        partial void RecipesComponents1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents1_Loaded(bool succeeded);

        partial void Name_Changed();

        partial void Name1_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Recipes. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesItem> Recipes
        {
            get
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Recipes);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
        {
            get
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.RecipesComponents);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Recipes1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesItem> Recipes1
        {
            get
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Recipes1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Recipes1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов RecipesComponents1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents1
        {
            get
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.RecipesComponents1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecipesComponents1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get 
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Спецификации.DetailsClass.SetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name1
        {
            get 
            {
                return global::LightSwitchApplication.Спецификации.DetailsClass.GetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name1);
            }
            set
            {
                global::LightSwitchApplication.Спецификации.DetailsClass.SetValue(this, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name1, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана NewRecOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewRecOk()
        {
            this.Details.Methods.NewRecOk.CreateInvocation().Execute();
        }
        partial void NewRecOk_CanExecute(ref bool result);
        partial void NewRecOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewRecCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewRecCancel()
        {
            this.Details.Methods.NewRecCancel.CreateInvocation().Execute();
        }
        partial void NewRecCancel_CanExecute(ref bool result);
        partial void NewRecCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана RecipesItemListAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RecipesItemListAddAndEditNew()
        {
            this.Details.Methods.RecipesItemListAddAndEditNew.CreateInvocation().Execute();
        }
        partial void RecipesItemListAddAndEditNew_CanExecute(ref bool result);
        partial void RecipesItemListAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана EditRecOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void EditRecOk()
        {
            this.Details.Methods.EditRecOk.CreateInvocation().Execute();
        }
        partial void EditRecOk_CanExecute(ref bool result);
        partial void EditRecOk_Execute();

        /// <summary>
        /// Вызывает метод экрана EdicRecCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void EdicRecCancel()
        {
            this.Details.Methods.EdicRecCancel.CreateInvocation().Execute();
        }
        partial void EdicRecCancel_CanExecute(ref bool result);
        partial void EdicRecCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана RecipesItemListEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RecipesItemListEditSelected()
        {
            this.Details.Methods.RecipesItemListEditSelected.CreateInvocation().Execute();
        }
        partial void RecipesItemListEditSelected_CanExecute(ref bool result);
        partial void RecipesItemListEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана RecipesItemListDeleteSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RecipesItemListDeleteSelected()
        {
            this.Details.Methods.RecipesItemListDeleteSelected.CreateInvocation().Execute();
        }
        partial void RecipesItemListDeleteSelected_CanExecute(ref bool result);
        partial void RecipesItemListDeleteSelected_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.Спецификации.DetailsClass.PropertySet, global::LightSwitchApplication.Спецификации.DetailsClass.CommandSet, global::LightSwitchApplication.Спецификации.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Recipes;
                var initializeCommandEntry = global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.NewRecOk;
                var initializeMethodEntry = global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.NewRecOk;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                __СпецификацииEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeSavingEvent,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeSavedEvent,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeClosingEvent,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeCreated,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeActivated,
                    global::LightSwitchApplication.Спецификации.DetailsClass.__Спецификации_InvokeSaveErrorEvent);
            private static void __Спецификации_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Спецификации s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Спецификации_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Спецификации_InvokeSavingEvent(global::LightSwitchApplication.Спецификации s)
            {
                bool handled = false;
                s.Спецификации_Saving(ref handled);
                return handled;
            }
            private static void __Спецификации_InvokeSavedEvent(global::LightSwitchApplication.Спецификации s)
            {
                s.Спецификации_Saved();
            }
            private static bool __Спецификации_InvokeClosingEvent(global::LightSwitchApplication.Спецификации s)
            {
                bool cancel = false;
                s.Спецификации_Closing(ref cancel);
                return cancel;
            }
            private static void __Спецификации_InvokeCreated(global::LightSwitchApplication.Спецификации s)
            {
                s.Спецификации_Created();
            }
            private static void __Спецификации_InvokeActivated(global::LightSwitchApplication.Спецификации s)
            {
                s.Спецификации_Activated();
            }
            private static bool __Спецификации_InvokeSaveErrorEvent(global::LightSwitchApplication.Спецификации s, global::System.Exception ex)
            {
                bool handled = false;
                s.Спецификации_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Спецификации.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Спецификации.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Спецификации.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesQuery(string Name)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            this.Screen.DataWorkspace.skladData.Recipes,
                            (r) => ((r.ID > 0m) && ((Name == null) || r.MatsAndGoodsItem.Name.Contains(Name)))),
                        (r) => r.MatsAndGoodsItem.Name),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponentsQuery(string Name1)
            {
                if (this.Screen.Recipes.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Recipes.SelectedItem.Details.Properties.RecipesComponents).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.OrderBy(
                        global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                            loader,
                            (r) => ((r.ID > 0m) && ((Name1 == null) || r.MatsAndGoodsItem.Name.Contains(Name1)))),
                        (r) => r.MatsAndGoodsItem.Name),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Recipes1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    this.Screen.DataWorkspace.skladData.Recipes,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RecipesComponents1Query()
            {
                if (this.Screen.Recipes1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RecipesComponentsItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Recipes1.SelectedItem.Details.Properties.RecipesComponents).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data _Recipes;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data _Recipes1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data _RecipesComponents1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Data _Name;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Data _Name1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _NewRecOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _NewRecCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _EditRecOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _EdicRecCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListDeleteSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _NewRecOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _NewRecCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _EditRecOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _EdicRecCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data _RecipesItemListDeleteSelectedMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem> Recipes
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Recipes);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.RecipesComponents);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem> Recipes1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Recipes1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem> RecipesComponents1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.RecipesComponents1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string> Name
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string> Name1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties.Name1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> NewRecOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.NewRecOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> NewRecCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.NewRecCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.RecipesItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> EditRecOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.EditRecOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> EdicRecCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.EdicRecCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.RecipesItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties.RecipesItemListDeleteSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> NewRecOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.NewRecOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> NewRecCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.NewRecCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.RecipesItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> EditRecOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.EditRecOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> EdicRecCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.EdicRecCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.RecipesItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass> RecipesItemListDeleteSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>)base.GetItem(global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties.RecipesItemListDeleteSelected);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry
                    Recipes = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry(
                        "Recipes",
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_CreateQuery,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_SelectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_OnCollectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes_OnLoaded);
                private static void _Recipes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._Recipes, sf);
                }
                private static void _Recipes_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Recipes_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Recipes_CreateQuery(global::LightSwitchApplication.Спецификации.DetailsClass d, object[] args)
                {
                    return d.RecipesQuery((string)args[0]);
                }
                private static void _Recipes_SelectionChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.Recipes_SelectionChanged();
                }
                private static void _Recipes_OnCollectionChanged(global::LightSwitchApplication.Спецификации s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Recipes_Changed(e);
                }
                private static void _Recipes_OnLoaded(global::LightSwitchApplication.Спецификации s, bool succeeded)
                {
                    s.Recipes_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents",
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_CreateQuery,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_SelectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_OnCollectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents_OnLoaded);
                private static void _RecipesComponents_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents, sf);
                }
                private static void _RecipesComponents_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents_CreateQuery(global::LightSwitchApplication.Спецификации.DetailsClass d, object[] args)
                {
                    return d.RecipesComponentsQuery((string)args[0]);
                }
                private static void _RecipesComponents_SelectionChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.RecipesComponents_SelectionChanged();
                }
                private static void _RecipesComponents_OnCollectionChanged(global::LightSwitchApplication.Спецификации s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents_Changed(e);
                }
                private static void _RecipesComponents_OnLoaded(global::LightSwitchApplication.Спецификации s, bool succeeded)
                {
                    s.RecipesComponents_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry
                    Recipes1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Entry(
                        "Recipes1",
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_CreateQuery,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_SelectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_OnCollectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Recipes1_OnLoaded);
                private static void _Recipes1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesItem>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._Recipes1, sf);
                }
                private static void _Recipes1_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Recipes1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Recipes1_CreateQuery(global::LightSwitchApplication.Спецификации.DetailsClass d, object[] args)
                {
                    return d.Recipes1Query();
                }
                private static void _Recipes1_SelectionChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.Recipes1_SelectionChanged();
                }
                private static void _Recipes1_OnCollectionChanged(global::LightSwitchApplication.Спецификации s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Recipes1_Changed(e);
                }
                private static void _Recipes1_OnLoaded(global::LightSwitchApplication.Спецификации s, bool succeeded)
                {
                    s.Recipes1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry
                    RecipesComponents1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Entry(
                        "RecipesComponents1",
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_CreateQuery,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_SelectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_OnCollectionChanged,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._RecipesComponents1_OnLoaded);
                private static void _RecipesComponents1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, global::LightSwitchApplication.RecipesComponentsItem>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesComponents1, sf);
                }
                private static void _RecipesComponents1_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RecipesComponents1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RecipesComponents1_CreateQuery(global::LightSwitchApplication.Спецификации.DetailsClass d, object[] args)
                {
                    return d.RecipesComponents1Query();
                }
                private static void _RecipesComponents1_SelectionChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.RecipesComponents1_SelectionChanged();
                }
                private static void _RecipesComponents1_OnCollectionChanged(global::LightSwitchApplication.Спецификации s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RecipesComponents1_Changed(e);
                }
                private static void _RecipesComponents1_OnLoaded(global::LightSwitchApplication.Спецификации s, bool succeeded)
                {
                    s.RecipesComponents1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Entry(
                        "Name",
                        false,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static void _Name_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name_Validate(r);
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.Name_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Entry
                    Name1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Entry(
                        "Name1",
                        false,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name1_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name1_Validate,
                        global::LightSwitchApplication.Спецификации.DetailsClass.PropertySetProperties._Name1_OnValueChanged);
                private static void _Name1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass, string>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._Name1, sf);
                }
                private static void _Name1_Validate(global::LightSwitchApplication.Спецификации s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Name1_Validate(r);
                }
                private static void _Name1_OnValueChanged(global::LightSwitchApplication.Спецификации s)
                {
                    s.Name1_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    NewRecOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "NewRecOk",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._NewRecOk_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._NewRecOk_CreateExecutableObject);
                private static void _NewRecOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._NewRecOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewRecOk_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.NewRecOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    NewRecCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "NewRecCancel",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._NewRecCancel_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._NewRecCancel_CreateExecutableObject);
                private static void _NewRecCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._NewRecCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewRecCancel_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.NewRecCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListAddAndEditNew",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListAddAndEditNew_CreateExecutableObject);
                private static void _RecipesItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _RecipesItemListAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.RecipesItemListAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    EditRecOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "EditRecOk",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._EditRecOk_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._EditRecOk_CreateExecutableObject);
                private static void _EditRecOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._EditRecOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _EditRecOk_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.EditRecOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    EdicRecCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "EdicRecCancel",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._EdicRecCancel_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._EdicRecCancel_CreateExecutableObject);
                private static void _EdicRecCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._EdicRecCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _EdicRecCancel_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.EdicRecCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListEditSelected",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListEditSelected_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListEditSelected_CreateExecutableObject);
                private static void _RecipesItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _RecipesItemListEditSelected_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.RecipesItemListEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListDeleteSelected",
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.CommandSetProperties._RecipesItemListDeleteSelected_CreateExecutableObject);
                private static void _RecipesItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListDeleteSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _RecipesItemListDeleteSelected_CreateExecutableObject(global::LightSwitchApplication.Спецификации.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Спецификации.DetailsClass)d).Methods.RecipesItemListDeleteSelected.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    NewRecOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "NewRecOk",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecOk_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecOk_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecOk_InvokeMethod);
                private static void _NewRecOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._NewRecOkMethod, sf);
                }
                private static global::System.Exception _NewRecOk_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewRecOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewRecOk_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewRecOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    NewRecCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "NewRecCancel",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecCancel_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecCancel_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._NewRecCancel_InvokeMethod);
                private static void _NewRecCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._NewRecCancelMethod, sf);
                }
                private static global::System.Exception _NewRecCancel_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewRecCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewRecCancel_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewRecCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListAddAndEditNew",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListAddAndEditNew_InvokeMethod);
                private static void _RecipesItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _RecipesItemListAddAndEditNew_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.RecipesItemListAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _RecipesItemListAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.RecipesItemListAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    EditRecOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "EditRecOk",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EditRecOk_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EditRecOk_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EditRecOk_InvokeMethod);
                private static void _EditRecOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._EditRecOkMethod, sf);
                }
                private static global::System.Exception _EditRecOk_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.EditRecOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _EditRecOk_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.EditRecOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    EdicRecCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "EdicRecCancel",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EdicRecCancel_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EdicRecCancel_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._EdicRecCancel_InvokeMethod);
                private static void _EdicRecCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._EdicRecCancelMethod, sf);
                }
                private static global::System.Exception _EdicRecCancel_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.EdicRecCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _EdicRecCancel_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.EdicRecCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListEditSelected",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListEditSelected_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListEditSelected_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListEditSelected_InvokeMethod);
                private static void _RecipesItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListEditSelectedMethod, sf);
                }
                private static global::System.Exception _RecipesItemListEditSelected_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.RecipesItemListEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _RecipesItemListEditSelected_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.RecipesItemListEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry
                    RecipesItemListDeleteSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Entry(
                        "RecipesItemListDeleteSelected",
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListDeleteSelected_Stub,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListDeleteSelected_CanInvoke,
                        global::LightSwitchApplication.Спецификации.DetailsClass.MethodSetProperties._RecipesItemListDeleteSelected_InvokeMethod);
                private static void _RecipesItemListDeleteSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Спецификации.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Спецификации, global::LightSwitchApplication.Спецификации.DetailsClass>.Data> c, global::LightSwitchApplication.Спецификации.DetailsClass d, object sf)
                {
                    c(d, ref d._RecipesItemListDeleteSelectedMethod, sf);
                }
                private static global::System.Exception _RecipesItemListDeleteSelected_CanInvoke(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.RecipesItemListDeleteSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _RecipesItemListDeleteSelected_InvokeMethod(global::LightSwitchApplication.Спецификации.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.RecipesItemListDeleteSelected_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    public sealed partial class Списание
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Списание() : base("LightSwitchApplication.Sklad.DesktopClient:Списание")
        {
            global::LightSwitchApplication.Списание.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Списание CreateInstance()
        {
            return new global::LightSwitchApplication.Списание(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Списание_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Получает объект Application для данного приложения.  Объект Application предоставляет доступ к активным экранам, методы для открытых экранов и доступ к текущему пользователю.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Получает вмещающую рабочую область данных.  Рабочая область данных предоставляет доступ ко всем источникам данных в приложении.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Actions_SelectionChanged();

        partial void Actions_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Loaded(bool succeeded);

        partial void ActionsFiller_SelectionChanged();

        partial void ActionsFiller_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Loaded(bool succeeded);

        partial void Actions1_SelectionChanged();

        partial void Actions1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Loaded(bool succeeded);

        partial void ActionsFiller1_SelectionChanged();

        partial void ActionsFiller1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Loaded(bool succeeded);

        partial void Skladi_SelectionChanged();

        partial void Skladi_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Loaded(bool succeeded);

        partial void CreationDateMore_Changed();

        partial void SkladName_Changed();

        partial void CreationDateLess_Changed();

        /// <summary>
        /// Получает коллекцию визуальных элементов Actions. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions
        {
            get
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Actions);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
        {
            get
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.ActionsFiller);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Actions1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsItem> Actions1
        {
            get
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Actions1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Actions1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов ActionsFiller1. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
        {
            get
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.ActionsFiller1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ActionsFiller1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Получает коллекцию визуальных элементов Skladi. Коллекция содержит все записи, отображаемые в данный момент в соответствующем списке или сетке.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.SkladiItem> Skladi
        {
            get
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Skladi);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Skladi_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateMore
        {
            get 
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateMore);
            }
            set
            {
                global::LightSwitchApplication.Списание.DetailsClass.SetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateMore, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateMore_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SkladName
        {
            get 
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.SkladName);
            }
            set
            {
                global::LightSwitchApplication.Списание.DetailsClass.SetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.SkladName, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SkladName_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> CreationDateLess
        {
            get 
            {
                return global::LightSwitchApplication.Списание.DetailsClass.GetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateLess);
            }
            set
            {
                global::LightSwitchApplication.Списание.DetailsClass.SetValue(this, global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateLess, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreationDateLess_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Вызывает метод экрана NewActionOk.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionOk()
        {
            this.Details.Methods.NewActionOk.CreateInvocation().Execute();
        }
        partial void NewActionOk_CanExecute(ref bool result);
        partial void NewActionOk_Execute();

        /// <summary>
        /// Вызывает метод экрана NewActionCancel.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void NewActionCancel()
        {
            this.Details.Methods.NewActionCancel.CreateInvocation().Execute();
        }
        partial void NewActionCancel_CanExecute(ref bool result);
        partial void NewActionCancel_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListAddAndEditNew.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListAddAndEditNew()
        {
            this.Details.Methods.ActionsItemListAddAndEditNew.CreateInvocation().Execute();
        }
        partial void ActionsItemListAddAndEditNew_CanExecute(ref bool result);
        partial void ActionsItemListAddAndEditNew_Execute();

        /// <summary>
        /// Вызывает метод экрана ActionsItemListEditSelected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void ActionsItemListEditSelected()
        {
            this.Details.Methods.ActionsItemListEditSelected.CreateInvocation().Execute();
        }
        partial void ActionsItemListEditSelected_CanExecute(ref bool result);
        partial void ActionsItemListEditSelected_Execute();

        /// <summary>
        /// Вызывает метод экрана OkApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void OkApply()
        {
            this.Details.Methods.OkApply.CreateInvocation().Execute();
        }
        partial void OkApply_CanExecute(ref bool result);
        partial void OkApply_Execute();

        /// <summary>
        /// Вызывает метод экрана CancelApply.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void CancelApply()
        {
            this.Details.Methods.CancelApply.CreateInvocation().Execute();
        }
        partial void CancelApply_CanExecute(ref bool result);
        partial void CancelApply_Execute();

        /// <summary>
        /// Вызывает метод экрана Writeline.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Writeline()
        {
            this.Details.Methods.Writeline.CreateInvocation().Execute();
        }
        partial void Writeline_CanExecute(ref bool result);
        partial void Writeline_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchDefault.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchDefault()
        {
            this.Details.Methods.SearchDefault.CreateInvocation().Execute();
        }
        partial void SearchDefault_CanExecute(ref bool result);
        partial void SearchDefault_Execute();

        /// <summary>
        /// Вызывает метод экрана SearchClose.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SearchClose()
        {
            this.Details.Methods.SearchClose.CreateInvocation().Execute();
        }
        partial void SearchClose_CanExecute(ref bool result);
        partial void SearchClose_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.Списание.DetailsClass.PropertySet, global::LightSwitchApplication.Списание.DetailsClass.CommandSet, global::LightSwitchApplication.Списание.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Actions;
                var initializeCommandEntry = global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.NewActionOk;
                var initializeMethodEntry = global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.NewActionOk;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                __СписаниеEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeSavingEvent,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeSavedEvent,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeClosingEvent,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeCreated,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeActivated,
                    global::LightSwitchApplication.Списание.DetailsClass.__Списание_InvokeSaveErrorEvent);
            private static void __Списание_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Списание s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Списание_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Списание_InvokeSavingEvent(global::LightSwitchApplication.Списание s)
            {
                bool handled = false;
                s.Списание_Saving(ref handled);
                return handled;
            }
            private static void __Списание_InvokeSavedEvent(global::LightSwitchApplication.Списание s)
            {
                s.Списание_Saved();
            }
            private static bool __Списание_InvokeClosingEvent(global::LightSwitchApplication.Списание s)
            {
                bool cancel = false;
                s.Списание_Closing(ref cancel);
                return cancel;
            }
            private static void __Списание_InvokeCreated(global::LightSwitchApplication.Списание s)
            {
                s.Списание_Created();
            }
            private static void __Списание_InvokeActivated(global::LightSwitchApplication.Списание s)
            {
                s.Списание_Activated();
            }
            private static bool __Списание_InvokeSaveErrorEvent(global::LightSwitchApplication.Списание s, global::System.Exception ex)
            {
                bool handled = false;
                s.Списание_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Списание.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Списание.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Списание.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsQuery(string SkladName, global::System.Nullable<global::System.DateTime> CreationDateMore, global::System.Nullable<global::System.DateTime> CreationDateLess)
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.Actions,
                        (a) => ((((a.Action.CompareTo("Списание") == 0) && ((CreationDateMore.HasValue == false) || (CreationDateMore.HasValue && (a.CreationDate >= CreationDateMore)))) && ((CreationDateLess.HasValue == false) || (CreationDateLess.HasValue && (a.CreationDate <= CreationDateLess)))) && ((SkladName == null) || a.SkladiItem.Name.Contains(SkladName)))),
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFillerQuery()
            {
                if (this.Screen.Actions.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    loader,
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Actions1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        this.Screen.DataWorkspace.skladData.Actions,
                        (a) => (a.ID == 0m)),
                    "SkladiItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable ActionsFiller1Query()
            {
                if (this.Screen.Actions1.SelectedItem == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.ActionsFillerItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Actions1.SelectedItem.Details.Properties.ActionsFiller).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                        loader,
                        (a) => (a.ID == 0m)),
                    "MatsAndGoodsItem");
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable SkladiQuery()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Where(
                    this.Screen.DataWorkspace.skladData.Skladi,
                    (s) => (s.Status.CompareTo("Функционирует") == 0));
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data _Actions1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data _ActionsFiller1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data _Skladi;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateMore;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string>.Data _SkladName;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _CreationDateLess;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _NewActionOkCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _NewActionCancelCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _ActionsItemListAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _ActionsItemListEditSelectedCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _OkApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _CancelApplyCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _WritelineCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _SearchDefaultCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _SearchCloseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _NewActionOkMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _NewActionCancelMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _ActionsItemListAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _ActionsItemListEditSelectedMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _OkApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _CancelApplyMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _WritelineMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _SearchDefaultMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data _SearchCloseMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Actions);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.ActionsFiller);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem> Actions1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Actions1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem> ActionsFiller1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.ActionsFiller1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem> Skladi
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.Skladi);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateMore
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateMore);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string> SkladName
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.SkladName);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>> CreationDateLess
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties.CreationDateLess);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> Writeline
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.Writeline);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties.SearchClose);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> NewActionOk
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.NewActionOk);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> NewActionCancel
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.NewActionCancel);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> ActionsItemListAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.ActionsItemListAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> ActionsItemListEditSelected
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.ActionsItemListEditSelected);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> OkApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.OkApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> CancelApply
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.CancelApply);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> Writeline
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.Writeline);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> SearchDefault
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.SearchDefault);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass> SearchClose
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>)base.GetItem(global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties.SearchClose);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions",
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_CreateQuery,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_SelectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_OnCollectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions_OnLoaded);
                private static void _Actions_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions, sf);
                }
                private static void _Actions_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions_CreateQuery(global::LightSwitchApplication.Списание.DetailsClass d, object[] args)
                {
                    return d.ActionsQuery((string)args[0], (global::System.Nullable<global::System.DateTime>)args[1], (global::System.Nullable<global::System.DateTime>)args[2]);
                }
                private static void _Actions_SelectionChanged(global::LightSwitchApplication.Списание s)
                {
                    s.Actions_SelectionChanged();
                }
                private static void _Actions_OnCollectionChanged(global::LightSwitchApplication.Списание s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions_Changed(e);
                }
                private static void _Actions_OnLoaded(global::LightSwitchApplication.Списание s, bool succeeded)
                {
                    s.Actions_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller",
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_CreateQuery,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_SelectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_OnCollectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller_OnLoaded);
                private static void _ActionsFiller_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller, sf);
                }
                private static void _ActionsFiller_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller_CreateQuery(global::LightSwitchApplication.Списание.DetailsClass d, object[] args)
                {
                    return d.ActionsFillerQuery();
                }
                private static void _ActionsFiller_SelectionChanged(global::LightSwitchApplication.Списание s)
                {
                    s.ActionsFiller_SelectionChanged();
                }
                private static void _ActionsFiller_OnCollectionChanged(global::LightSwitchApplication.Списание s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller_Changed(e);
                }
                private static void _ActionsFiller_OnLoaded(global::LightSwitchApplication.Списание s, bool succeeded)
                {
                    s.ActionsFiller_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry
                    Actions1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Entry(
                        "Actions1",
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_CreateQuery,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_SelectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_OnCollectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Actions1_OnLoaded);
                private static void _Actions1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsItem>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._Actions1, sf);
                }
                private static void _Actions1_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Actions1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Actions1_CreateQuery(global::LightSwitchApplication.Списание.DetailsClass d, object[] args)
                {
                    return d.Actions1Query();
                }
                private static void _Actions1_SelectionChanged(global::LightSwitchApplication.Списание s)
                {
                    s.Actions1_SelectionChanged();
                }
                private static void _Actions1_OnCollectionChanged(global::LightSwitchApplication.Списание s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Actions1_Changed(e);
                }
                private static void _Actions1_OnLoaded(global::LightSwitchApplication.Списание s, bool succeeded)
                {
                    s.Actions1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry
                    ActionsFiller1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Entry(
                        "ActionsFiller1",
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_CreateQuery,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_SelectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_OnCollectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._ActionsFiller1_OnLoaded);
                private static void _ActionsFiller1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.ActionsFillerItem>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsFiller1, sf);
                }
                private static void _ActionsFiller1_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ActionsFiller1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _ActionsFiller1_CreateQuery(global::LightSwitchApplication.Списание.DetailsClass d, object[] args)
                {
                    return d.ActionsFiller1Query();
                }
                private static void _ActionsFiller1_SelectionChanged(global::LightSwitchApplication.Списание s)
                {
                    s.ActionsFiller1_SelectionChanged();
                }
                private static void _ActionsFiller1_OnCollectionChanged(global::LightSwitchApplication.Списание s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.ActionsFiller1_Changed(e);
                }
                private static void _ActionsFiller1_OnLoaded(global::LightSwitchApplication.Списание s, bool succeeded)
                {
                    s.ActionsFiller1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry
                    Skladi = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem>.Entry(
                        "Skladi",
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_CreateQuery,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_SelectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_OnCollectionChanged,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._Skladi_OnLoaded);
                private static void _Skladi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::LightSwitchApplication.SkladiItem>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._Skladi, sf);
                }
                private static void _Skladi_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Skladi_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Skladi_CreateQuery(global::LightSwitchApplication.Списание.DetailsClass d, object[] args)
                {
                    return d.SkladiQuery();
                }
                private static void _Skladi_SelectionChanged(global::LightSwitchApplication.Списание s)
                {
                    s.Skladi_SelectionChanged();
                }
                private static void _Skladi_OnCollectionChanged(global::LightSwitchApplication.Списание s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Skladi_Changed(e);
                }
                private static void _Skladi_OnLoaded(global::LightSwitchApplication.Списание s, bool succeeded)
                {
                    s.Skladi_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateMore = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateMore",
                        false,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateMore_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateMore_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateMore_OnValueChanged);
                private static void _CreationDateMore_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateMore, sf);
                }
                private static void _CreationDateMore_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateMore_Validate(r);
                }
                private static void _CreationDateMore_OnValueChanged(global::LightSwitchApplication.Списание s)
                {
                    s.CreationDateMore_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string>.Entry
                    SkladName = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string>.Entry(
                        "SkladName",
                        false,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._SkladName_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._SkladName_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._SkladName_OnValueChanged);
                private static void _SkladName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, string>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._SkladName, sf);
                }
                private static void _SkladName_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.SkladName_Validate(r);
                }
                private static void _SkladName_OnValueChanged(global::LightSwitchApplication.Списание s)
                {
                    s.SkladName_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    CreationDateLess = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "CreationDateLess",
                        false,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateLess_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateLess_Validate,
                        global::LightSwitchApplication.Списание.DetailsClass.PropertySetProperties._CreationDateLess_OnValueChanged);
                private static void _CreationDateLess_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._CreationDateLess, sf);
                }
                private static void _CreationDateLess_Validate(global::LightSwitchApplication.Списание s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.CreationDateLess_Validate(r);
                }
                private static void _CreationDateLess_OnValueChanged(global::LightSwitchApplication.Списание s)
                {
                    s.CreationDateLess_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._NewActionOk_CreateExecutableObject);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionOk_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.NewActionOk.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._NewActionCancel_CreateExecutableObject);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _NewActionCancel_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.NewActionCancel.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._ActionsItemListAddAndEditNew_CreateExecutableObject);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.ActionsItemListAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._ActionsItemListEditSelected_CreateExecutableObject);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _ActionsItemListEditSelected_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.ActionsItemListEditSelected.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._OkApply_CreateExecutableObject);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _OkApply_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.OkApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._CancelApply_CreateExecutableObject);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _CancelApply_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.CancelApply.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    Writeline = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "Writeline",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._Writeline_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._Writeline_CreateExecutableObject);
                private static void _Writeline_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._WritelineCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Writeline_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.Writeline.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._SearchDefault_CreateExecutableObject);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchDefault_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.SearchDefault.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.CommandSetProperties._SearchClose_CreateExecutableObject);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _SearchClose_CreateExecutableObject(global::LightSwitchApplication.Списание.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.Списание.DetailsClass)d).Methods.SearchClose.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    NewActionOk = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "NewActionOk",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionOk_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionOk_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionOk_InvokeMethod);
                private static void _NewActionOk_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionOkMethod, sf);
                }
                private static global::System.Exception _NewActionOk_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionOk_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionOk_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionOk_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    NewActionCancel = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "NewActionCancel",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionCancel_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionCancel_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._NewActionCancel_InvokeMethod);
                private static void _NewActionCancel_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._NewActionCancelMethod, sf);
                }
                private static global::System.Exception _NewActionCancel_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.NewActionCancel_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _NewActionCancel_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.NewActionCancel_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    ActionsItemListAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "ActionsItemListAddAndEditNew",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListAddAndEditNew_InvokeMethod);
                private static void _ActionsItemListAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _ActionsItemListAddAndEditNew_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListAddAndEditNew_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    ActionsItemListEditSelected = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "ActionsItemListEditSelected",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._ActionsItemListEditSelected_InvokeMethod);
                private static void _ActionsItemListEditSelected_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._ActionsItemListEditSelectedMethod, sf);
                }
                private static global::System.Exception _ActionsItemListEditSelected_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.ActionsItemListEditSelected_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _ActionsItemListEditSelected_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.ActionsItemListEditSelected_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    OkApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "OkApply",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._OkApply_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._OkApply_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._OkApply_InvokeMethod);
                private static void _OkApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._OkApplyMethod, sf);
                }
                private static global::System.Exception _OkApply_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.OkApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _OkApply_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.OkApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    CancelApply = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "CancelApply",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._CancelApply_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._CancelApply_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._CancelApply_InvokeMethod);
                private static void _CancelApply_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelApplyMethod, sf);
                }
                private static global::System.Exception _CancelApply_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.CancelApply_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _CancelApply_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.CancelApply_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    Writeline = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "Writeline",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._Writeline_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._Writeline_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._Writeline_InvokeMethod);
                private static void _Writeline_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._WritelineMethod, sf);
                }
                private static global::System.Exception _Writeline_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Writeline_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Writeline_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Writeline_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    SearchDefault = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "SearchDefault",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchDefault_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchDefault_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchDefault_InvokeMethod);
                private static void _SearchDefault_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchDefaultMethod, sf);
                }
                private static global::System.Exception _SearchDefault_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchDefault_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchDefault_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchDefault_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry
                    SearchClose = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Entry(
                        "SearchClose",
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchClose_Stub,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchClose_CanInvoke,
                        global::LightSwitchApplication.Списание.DetailsClass.MethodSetProperties._SearchClose_InvokeMethod);
                private static void _SearchClose_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Списание.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.Списание, global::LightSwitchApplication.Списание.DetailsClass>.Data> c, global::LightSwitchApplication.Списание.DetailsClass d, object sf)
                {
                    c(d, ref d._SearchCloseMethod, sf);
                }
                private static global::System.Exception _SearchClose_CanInvoke(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.SearchClose_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _SearchClose_InvokeMethod(global::LightSwitchApplication.Списание.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.SearchClose_Execute();
                }

            }
        }
    }
}
